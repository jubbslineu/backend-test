
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model PaymentRequest
 * 
 */
export type PaymentRequest = $Result.DefaultSelection<Prisma.$PaymentRequestPayload>
/**
 * Model MerkleEntry
 * 
 */
export type MerkleEntry = $Result.DefaultSelection<Prisma.$MerkleEntryPayload>
/**
 * Model Sale
 * 
 */
export type Sale = $Result.DefaultSelection<Prisma.$SalePayload>
/**
 * Model Purchase
 * 
 */
export type Purchase = $Result.DefaultSelection<Prisma.$PurchasePayload>
/**
 * Model Reward
 * 
 */
export type Reward = $Result.DefaultSelection<Prisma.$RewardPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  REGULAR: 'REGULAR',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const SubscriptionStatus: {
  APPROVED: 'APPROVED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const PaymentRequestStatus: {
  PENDING: 'PENDING',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

export type PaymentRequestStatus = (typeof PaymentRequestStatus)[keyof typeof PaymentRequestStatus]


export const PaymentMethod: {
  CHANGELLY_CRYPTO: 'CHANGELLY_CRYPTO',
  CHANGELLY_FIAT: 'CHANGELLY_FIAT',
  TON: 'TON'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const SaleStatus: {
  ON_SALE: 'ON_SALE',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED',
  SOLD_OUT: 'SOLD_OUT'
};

export type SaleStatus = (typeof SaleStatus)[keyof typeof SaleStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

export type PaymentRequestStatus = $Enums.PaymentRequestStatus

export const PaymentRequestStatus: typeof $Enums.PaymentRequestStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type SaleStatus = $Enums.SaleStatus

export const SaleStatus: typeof $Enums.SaleStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.paymentRequest`: Exposes CRUD operations for the **PaymentRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentRequests
    * const paymentRequests = await prisma.paymentRequest.findMany()
    * ```
    */
  get paymentRequest(): Prisma.PaymentRequestDelegate<ExtArgs>;

  /**
   * `prisma.merkleEntry`: Exposes CRUD operations for the **MerkleEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MerkleEntries
    * const merkleEntries = await prisma.merkleEntry.findMany()
    * ```
    */
  get merkleEntry(): Prisma.MerkleEntryDelegate<ExtArgs>;

  /**
   * `prisma.sale`: Exposes CRUD operations for the **Sale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sales
    * const sales = await prisma.sale.findMany()
    * ```
    */
  get sale(): Prisma.SaleDelegate<ExtArgs>;

  /**
   * `prisma.purchase`: Exposes CRUD operations for the **Purchase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Purchases
    * const purchases = await prisma.purchase.findMany()
    * ```
    */
  get purchase(): Prisma.PurchaseDelegate<ExtArgs>;

  /**
   * `prisma.reward`: Exposes CRUD operations for the **Reward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rewards
    * const rewards = await prisma.reward.findMany()
    * ```
    */
  get reward(): Prisma.RewardDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Subscription: 'Subscription',
    PaymentRequest: 'PaymentRequest',
    MerkleEntry: 'MerkleEntry',
    Sale: 'Sale',
    Purchase: 'Purchase',
    Reward: 'Reward'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'subscription' | 'paymentRequest' | 'merkleEntry' | 'sale' | 'purchase' | 'reward'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      PaymentRequest: {
        payload: Prisma.$PaymentRequestPayload<ExtArgs>
        fields: Prisma.PaymentRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentRequestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentRequestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload>
          }
          findFirst: {
            args: Prisma.PaymentRequestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentRequestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload>
          }
          findMany: {
            args: Prisma.PaymentRequestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload>[]
          }
          create: {
            args: Prisma.PaymentRequestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload>
          }
          createMany: {
            args: Prisma.PaymentRequestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaymentRequestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload>
          }
          update: {
            args: Prisma.PaymentRequestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload>
          }
          deleteMany: {
            args: Prisma.PaymentRequestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentRequestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaymentRequestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentRequestPayload>
          }
          aggregate: {
            args: Prisma.PaymentRequestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaymentRequest>
          }
          groupBy: {
            args: Prisma.PaymentRequestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentRequestCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentRequestCountAggregateOutputType> | number
          }
        }
      }
      MerkleEntry: {
        payload: Prisma.$MerkleEntryPayload<ExtArgs>
        fields: Prisma.MerkleEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MerkleEntryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MerkleEntryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload>
          }
          findFirst: {
            args: Prisma.MerkleEntryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MerkleEntryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload>
          }
          findMany: {
            args: Prisma.MerkleEntryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload>[]
          }
          create: {
            args: Prisma.MerkleEntryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload>
          }
          createMany: {
            args: Prisma.MerkleEntryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MerkleEntryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload>
          }
          update: {
            args: Prisma.MerkleEntryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload>
          }
          deleteMany: {
            args: Prisma.MerkleEntryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MerkleEntryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MerkleEntryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MerkleEntryPayload>
          }
          aggregate: {
            args: Prisma.MerkleEntryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMerkleEntry>
          }
          groupBy: {
            args: Prisma.MerkleEntryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MerkleEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MerkleEntryCountArgs<ExtArgs>,
            result: $Utils.Optional<MerkleEntryCountAggregateOutputType> | number
          }
        }
      }
      Sale: {
        payload: Prisma.$SalePayload<ExtArgs>
        fields: Prisma.SaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          findFirst: {
            args: Prisma.SaleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          findMany: {
            args: Prisma.SaleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          create: {
            args: Prisma.SaleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          createMany: {
            args: Prisma.SaleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SaleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          update: {
            args: Prisma.SaleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          deleteMany: {
            args: Prisma.SaleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SaleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SaleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          aggregate: {
            args: Prisma.SaleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSale>
          }
          groupBy: {
            args: Prisma.SaleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaleCountArgs<ExtArgs>,
            result: $Utils.Optional<SaleCountAggregateOutputType> | number
          }
        }
      }
      Purchase: {
        payload: Prisma.$PurchasePayload<ExtArgs>
        fields: Prisma.PurchaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          findFirst: {
            args: Prisma.PurchaseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          findMany: {
            args: Prisma.PurchaseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>[]
          }
          create: {
            args: Prisma.PurchaseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          createMany: {
            args: Prisma.PurchaseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PurchaseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          update: {
            args: Prisma.PurchaseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          deleteMany: {
            args: Prisma.PurchaseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PurchaseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          aggregate: {
            args: Prisma.PurchaseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePurchase>
          }
          groupBy: {
            args: Prisma.PurchaseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PurchaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseCountArgs<ExtArgs>,
            result: $Utils.Optional<PurchaseCountAggregateOutputType> | number
          }
        }
      }
      Reward: {
        payload: Prisma.$RewardPayload<ExtArgs>
        fields: Prisma.RewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RewardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RewardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          findFirst: {
            args: Prisma.RewardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RewardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          findMany: {
            args: Prisma.RewardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>[]
          }
          create: {
            args: Prisma.RewardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          createMany: {
            args: Prisma.RewardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RewardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          update: {
            args: Prisma.RewardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          deleteMany: {
            args: Prisma.RewardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RewardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RewardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          aggregate: {
            args: Prisma.RewardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReward>
          }
          groupBy: {
            args: Prisma.RewardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.RewardCountArgs<ExtArgs>,
            result: $Utils.Optional<RewardCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    purchases: number
    rewardsEarned: number
    rewardsGenerated: number
    referees: number
    paymentRequests: number
    merkleEntries: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchases?: boolean | UserCountOutputTypeCountPurchasesArgs
    rewardsEarned?: boolean | UserCountOutputTypeCountRewardsEarnedArgs
    rewardsGenerated?: boolean | UserCountOutputTypeCountRewardsGeneratedArgs
    referees?: boolean | UserCountOutputTypeCountRefereesArgs
    paymentRequests?: boolean | UserCountOutputTypeCountPaymentRequestsArgs
    merkleEntries?: boolean | UserCountOutputTypeCountMerkleEntriesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPurchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRewardsEarnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRewardsGeneratedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMerkleEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerkleEntryWhereInput
  }


  /**
   * Count Type SaleCountOutputType
   */

  export type SaleCountOutputType = {
    purchases: number
    rewards: number
    paymentRequests: number
    merkleEntries: number
  }

  export type SaleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchases?: boolean | SaleCountOutputTypeCountPurchasesArgs
    rewards?: boolean | SaleCountOutputTypeCountRewardsArgs
    paymentRequests?: boolean | SaleCountOutputTypeCountPaymentRequestsArgs
    merkleEntries?: boolean | SaleCountOutputTypeCountMerkleEntriesArgs
  }

  // Custom InputTypes
  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleCountOutputType
     */
    select?: SaleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeCountPurchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseWhereInput
  }

  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeCountRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
  }

  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeCountPaymentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentRequestWhereInput
  }

  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeCountMerkleEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerkleEntryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    referralRewardLevelRates: number | null
    nonce: number | null
  }

  export type UserSumAggregateOutputType = {
    referralRewardLevelRates: number[]
    nonce: number | null
  }

  export type UserMinAggregateOutputType = {
    telegramId: string | null
    referrerId: string | null
    nonce: number | null
    walletAddress: string | null
    username: string | null
    password: string | null
    role: $Enums.UserRole | null
  }

  export type UserMaxAggregateOutputType = {
    telegramId: string | null
    referrerId: string | null
    nonce: number | null
    walletAddress: string | null
    username: string | null
    password: string | null
    role: $Enums.UserRole | null
  }

  export type UserCountAggregateOutputType = {
    telegramId: number
    referrerId: number
    referralRewardLevelRates: number
    nonce: number
    walletAddress: number
    username: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    referralRewardLevelRates?: true
    nonce?: true
  }

  export type UserSumAggregateInputType = {
    referralRewardLevelRates?: true
    nonce?: true
  }

  export type UserMinAggregateInputType = {
    telegramId?: true
    referrerId?: true
    nonce?: true
    walletAddress?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    telegramId?: true
    referrerId?: true
    nonce?: true
    walletAddress?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    telegramId?: true
    referrerId?: true
    referralRewardLevelRates?: true
    nonce?: true
    walletAddress?: true
    username?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    telegramId: string
    referrerId: string | null
    referralRewardLevelRates: number[]
    nonce: number
    walletAddress: string | null
    username: string | null
    password: string | null
    role: $Enums.UserRole
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    telegramId?: boolean
    referrerId?: boolean
    referralRewardLevelRates?: boolean
    nonce?: boolean
    walletAddress?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    purchases?: boolean | User$purchasesArgs<ExtArgs>
    rewardsEarned?: boolean | User$rewardsEarnedArgs<ExtArgs>
    rewardsGenerated?: boolean | User$rewardsGeneratedArgs<ExtArgs>
    referees?: boolean | User$refereesArgs<ExtArgs>
    paymentRequests?: boolean | User$paymentRequestsArgs<ExtArgs>
    merkleEntries?: boolean | User$merkleEntriesArgs<ExtArgs>
    referrer?: boolean | User$referrerArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    telegramId?: boolean
    referrerId?: boolean
    referralRewardLevelRates?: boolean
    nonce?: boolean
    walletAddress?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    purchases?: boolean | User$purchasesArgs<ExtArgs>
    rewardsEarned?: boolean | User$rewardsEarnedArgs<ExtArgs>
    rewardsGenerated?: boolean | User$rewardsGeneratedArgs<ExtArgs>
    referees?: boolean | User$refereesArgs<ExtArgs>
    paymentRequests?: boolean | User$paymentRequestsArgs<ExtArgs>
    merkleEntries?: boolean | User$merkleEntriesArgs<ExtArgs>
    referrer?: boolean | User$referrerArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      subscription: Prisma.$SubscriptionPayload<ExtArgs> | null
      purchases: Prisma.$PurchasePayload<ExtArgs>[]
      rewardsEarned: Prisma.$RewardPayload<ExtArgs>[]
      rewardsGenerated: Prisma.$RewardPayload<ExtArgs>[]
      referees: Prisma.$UserPayload<ExtArgs>[]
      paymentRequests: Prisma.$PaymentRequestPayload<ExtArgs>[]
      merkleEntries: Prisma.$MerkleEntryPayload<ExtArgs>[]
      referrer: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      telegramId: string
      referrerId: string | null
      referralRewardLevelRates: number[]
      nonce: number
      walletAddress: string | null
      username: string | null
      password: string | null
      role: $Enums.UserRole
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `telegramId`
     * const userWithTelegramIdOnly = await prisma.user.findMany({ select: { telegramId: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subscription<T extends User$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    purchases<T extends User$purchasesArgs<ExtArgs> = {}>(args?: Subset<T, User$purchasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'findMany'> | Null>;

    rewardsEarned<T extends User$rewardsEarnedArgs<ExtArgs> = {}>(args?: Subset<T, User$rewardsEarnedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findMany'> | Null>;

    rewardsGenerated<T extends User$rewardsGeneratedArgs<ExtArgs> = {}>(args?: Subset<T, User$rewardsGeneratedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findMany'> | Null>;

    referees<T extends User$refereesArgs<ExtArgs> = {}>(args?: Subset<T, User$refereesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    paymentRequests<T extends User$paymentRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'findMany'> | Null>;

    merkleEntries<T extends User$merkleEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$merkleEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'findMany'> | Null>;

    referrer<T extends User$referrerArgs<ExtArgs> = {}>(args?: Subset<T, User$referrerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly telegramId: FieldRef<"User", 'String'>
    readonly referrerId: FieldRef<"User", 'String'>
    readonly referralRewardLevelRates: FieldRef<"User", 'Float[]'>
    readonly nonce: FieldRef<"User", 'Int'>
    readonly walletAddress: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.subscription
   */
  export type User$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
  }

  /**
   * User.purchases
   */
  export type User$purchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    where?: PurchaseWhereInput
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    cursor?: PurchaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * User.rewardsEarned
   */
  export type User$rewardsEarnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    cursor?: RewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * User.rewardsGenerated
   */
  export type User$rewardsGeneratedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    cursor?: RewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * User.referees
   */
  export type User$refereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.paymentRequests
   */
  export type User$paymentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    where?: PaymentRequestWhereInput
    orderBy?: PaymentRequestOrderByWithRelationInput | PaymentRequestOrderByWithRelationInput[]
    cursor?: PaymentRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentRequestScalarFieldEnum | PaymentRequestScalarFieldEnum[]
  }

  /**
   * User.merkleEntries
   */
  export type User$merkleEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    where?: MerkleEntryWhereInput
    orderBy?: MerkleEntryOrderByWithRelationInput | MerkleEntryOrderByWithRelationInput[]
    cursor?: MerkleEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerkleEntryScalarFieldEnum | MerkleEntryScalarFieldEnum[]
  }

  /**
   * User.referrer
   */
  export type User$referrerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    telegramId: string | null
    telegramUsername: string | null
    dateOfBirth: Date | null
    emailAddress: string | null
    indicative: string | null
    phoneNumber: string | null
    cityOfResidency: string | null
    homeAddress: string | null
    personalInterests: string | null
    artisticInterests: string | null
    investmentInterests: string | null
    occupation: string | null
    position: string | null
    industry: string | null
    joiningReasons: string | null
    discoveryMethod: string | null
    expectations: string | null
    contribution: string | null
    engagement: string | null
    status: $Enums.SubscriptionStatus | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    telegramId: string | null
    telegramUsername: string | null
    dateOfBirth: Date | null
    emailAddress: string | null
    indicative: string | null
    phoneNumber: string | null
    cityOfResidency: string | null
    homeAddress: string | null
    personalInterests: string | null
    artisticInterests: string | null
    investmentInterests: string | null
    occupation: string | null
    position: string | null
    industry: string | null
    joiningReasons: string | null
    discoveryMethod: string | null
    expectations: string | null
    contribution: string | null
    engagement: string | null
    status: $Enums.SubscriptionStatus | null
  }

  export type SubscriptionCountAggregateOutputType = {
    telegramId: number
    telegramUsername: number
    dateOfBirth: number
    emailAddress: number
    indicative: number
    phoneNumber: number
    cityOfResidency: number
    homeAddress: number
    personalInterests: number
    artisticInterests: number
    investmentInterests: number
    occupation: number
    position: number
    industry: number
    joiningReasons: number
    discoveryMethod: number
    expectations: number
    contribution: number
    engagement: number
    status: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    telegramId?: true
    telegramUsername?: true
    dateOfBirth?: true
    emailAddress?: true
    indicative?: true
    phoneNumber?: true
    cityOfResidency?: true
    homeAddress?: true
    personalInterests?: true
    artisticInterests?: true
    investmentInterests?: true
    occupation?: true
    position?: true
    industry?: true
    joiningReasons?: true
    discoveryMethod?: true
    expectations?: true
    contribution?: true
    engagement?: true
    status?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    telegramId?: true
    telegramUsername?: true
    dateOfBirth?: true
    emailAddress?: true
    indicative?: true
    phoneNumber?: true
    cityOfResidency?: true
    homeAddress?: true
    personalInterests?: true
    artisticInterests?: true
    investmentInterests?: true
    occupation?: true
    position?: true
    industry?: true
    joiningReasons?: true
    discoveryMethod?: true
    expectations?: true
    contribution?: true
    engagement?: true
    status?: true
  }

  export type SubscriptionCountAggregateInputType = {
    telegramId?: true
    telegramUsername?: true
    dateOfBirth?: true
    emailAddress?: true
    indicative?: true
    phoneNumber?: true
    cityOfResidency?: true
    homeAddress?: true
    personalInterests?: true
    artisticInterests?: true
    investmentInterests?: true
    occupation?: true
    position?: true
    industry?: true
    joiningReasons?: true
    discoveryMethod?: true
    expectations?: true
    contribution?: true
    engagement?: true
    status?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    telegramId: string
    telegramUsername: string | null
    dateOfBirth: Date | null
    emailAddress: string | null
    indicative: string | null
    phoneNumber: string | null
    cityOfResidency: string | null
    homeAddress: string | null
    personalInterests: string | null
    artisticInterests: string | null
    investmentInterests: string | null
    occupation: string | null
    position: string | null
    industry: string | null
    joiningReasons: string | null
    discoveryMethod: string | null
    expectations: string | null
    contribution: string | null
    engagement: string | null
    status: $Enums.SubscriptionStatus
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    telegramId?: boolean
    telegramUsername?: boolean
    dateOfBirth?: boolean
    emailAddress?: boolean
    indicative?: boolean
    phoneNumber?: boolean
    cityOfResidency?: boolean
    homeAddress?: boolean
    personalInterests?: boolean
    artisticInterests?: boolean
    investmentInterests?: boolean
    occupation?: boolean
    position?: boolean
    industry?: boolean
    joiningReasons?: boolean
    discoveryMethod?: boolean
    expectations?: boolean
    contribution?: boolean
    engagement?: boolean
    status?: boolean
    user?: boolean | Subscription$userArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    telegramId?: boolean
    telegramUsername?: boolean
    dateOfBirth?: boolean
    emailAddress?: boolean
    indicative?: boolean
    phoneNumber?: boolean
    cityOfResidency?: boolean
    homeAddress?: boolean
    personalInterests?: boolean
    artisticInterests?: boolean
    investmentInterests?: boolean
    occupation?: boolean
    position?: boolean
    industry?: boolean
    joiningReasons?: boolean
    discoveryMethod?: boolean
    expectations?: boolean
    contribution?: boolean
    engagement?: boolean
    status?: boolean
  }


  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Subscription$userArgs<ExtArgs>
  }


  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      telegramId: string
      telegramUsername: string | null
      dateOfBirth: Date | null
      emailAddress: string | null
      indicative: string | null
      phoneNumber: string | null
      cityOfResidency: string | null
      homeAddress: string | null
      personalInterests: string | null
      artisticInterests: string | null
      investmentInterests: string | null
      occupation: string | null
      position: string | null
      industry: string | null
      joiningReasons: string | null
      discoveryMethod: string | null
      expectations: string | null
      contribution: string | null
      engagement: string | null
      status: $Enums.SubscriptionStatus
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }


  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubscriptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubscriptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `telegramId`
     * const subscriptionWithTelegramIdOnly = await prisma.subscription.findMany({ select: { telegramId: true } })
     * 
    **/
    findMany<T extends SubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
    **/
    create<T extends SubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subscriptions.
     *     @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     *     @example
     *     // Create many Subscriptions
     *     const subscription = await prisma.subscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
    **/
    delete<T extends SubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
    **/
    upsert<T extends SubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Subscription$userArgs<ExtArgs> = {}>(args?: Subset<T, Subscription$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Subscription model
   */ 
  interface SubscriptionFieldRefs {
    readonly telegramId: FieldRef<"Subscription", 'String'>
    readonly telegramUsername: FieldRef<"Subscription", 'String'>
    readonly dateOfBirth: FieldRef<"Subscription", 'DateTime'>
    readonly emailAddress: FieldRef<"Subscription", 'String'>
    readonly indicative: FieldRef<"Subscription", 'String'>
    readonly phoneNumber: FieldRef<"Subscription", 'String'>
    readonly cityOfResidency: FieldRef<"Subscription", 'String'>
    readonly homeAddress: FieldRef<"Subscription", 'String'>
    readonly personalInterests: FieldRef<"Subscription", 'String'>
    readonly artisticInterests: FieldRef<"Subscription", 'String'>
    readonly investmentInterests: FieldRef<"Subscription", 'String'>
    readonly occupation: FieldRef<"Subscription", 'String'>
    readonly position: FieldRef<"Subscription", 'String'>
    readonly industry: FieldRef<"Subscription", 'String'>
    readonly joiningReasons: FieldRef<"Subscription", 'String'>
    readonly discoveryMethod: FieldRef<"Subscription", 'String'>
    readonly expectations: FieldRef<"Subscription", 'String'>
    readonly contribution: FieldRef<"Subscription", 'String'>
    readonly engagement: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'SubscriptionStatus'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription.user
   */
  export type Subscription$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model PaymentRequest
   */

  export type AggregatePaymentRequest = {
    _count: PaymentRequestCountAggregateOutputType | null
    _avg: PaymentRequestAvgAggregateOutputType | null
    _sum: PaymentRequestSumAggregateOutputType | null
    _min: PaymentRequestMinAggregateOutputType | null
    _max: PaymentRequestMaxAggregateOutputType | null
  }

  export type PaymentRequestAvgAggregateOutputType = {
    seqNo: number | null
    amount: number | null
    price: number | null
  }

  export type PaymentRequestSumAggregateOutputType = {
    seqNo: number | null
    amount: number | null
    price: number | null
  }

  export type PaymentRequestMinAggregateOutputType = {
    telegramId: string | null
    saleName: string | null
    seqNo: number | null
    code: string | null
    status: $Enums.PaymentRequestStatus | null
    amount: number | null
    price: number | null
    destination: string | null
    method: $Enums.PaymentMethod | null
    createdAt: Date | null
    updatedAt: Date | null
    expireAt: Date | null
  }

  export type PaymentRequestMaxAggregateOutputType = {
    telegramId: string | null
    saleName: string | null
    seqNo: number | null
    code: string | null
    status: $Enums.PaymentRequestStatus | null
    amount: number | null
    price: number | null
    destination: string | null
    method: $Enums.PaymentMethod | null
    createdAt: Date | null
    updatedAt: Date | null
    expireAt: Date | null
  }

  export type PaymentRequestCountAggregateOutputType = {
    telegramId: number
    saleName: number
    seqNo: number
    code: number
    status: number
    amount: number
    price: number
    destination: number
    method: number
    createdAt: number
    updatedAt: number
    expireAt: number
    _all: number
  }


  export type PaymentRequestAvgAggregateInputType = {
    seqNo?: true
    amount?: true
    price?: true
  }

  export type PaymentRequestSumAggregateInputType = {
    seqNo?: true
    amount?: true
    price?: true
  }

  export type PaymentRequestMinAggregateInputType = {
    telegramId?: true
    saleName?: true
    seqNo?: true
    code?: true
    status?: true
    amount?: true
    price?: true
    destination?: true
    method?: true
    createdAt?: true
    updatedAt?: true
    expireAt?: true
  }

  export type PaymentRequestMaxAggregateInputType = {
    telegramId?: true
    saleName?: true
    seqNo?: true
    code?: true
    status?: true
    amount?: true
    price?: true
    destination?: true
    method?: true
    createdAt?: true
    updatedAt?: true
    expireAt?: true
  }

  export type PaymentRequestCountAggregateInputType = {
    telegramId?: true
    saleName?: true
    seqNo?: true
    code?: true
    status?: true
    amount?: true
    price?: true
    destination?: true
    method?: true
    createdAt?: true
    updatedAt?: true
    expireAt?: true
    _all?: true
  }

  export type PaymentRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentRequest to aggregate.
     */
    where?: PaymentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentRequests to fetch.
     */
    orderBy?: PaymentRequestOrderByWithRelationInput | PaymentRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentRequests
    **/
    _count?: true | PaymentRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentRequestMaxAggregateInputType
  }

  export type GetPaymentRequestAggregateType<T extends PaymentRequestAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentRequest[P]>
      : GetScalarType<T[P], AggregatePaymentRequest[P]>
  }




  export type PaymentRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentRequestWhereInput
    orderBy?: PaymentRequestOrderByWithAggregationInput | PaymentRequestOrderByWithAggregationInput[]
    by: PaymentRequestScalarFieldEnum[] | PaymentRequestScalarFieldEnum
    having?: PaymentRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentRequestCountAggregateInputType | true
    _avg?: PaymentRequestAvgAggregateInputType
    _sum?: PaymentRequestSumAggregateInputType
    _min?: PaymentRequestMinAggregateInputType
    _max?: PaymentRequestMaxAggregateInputType
  }

  export type PaymentRequestGroupByOutputType = {
    telegramId: string
    saleName: string
    seqNo: number
    code: string
    status: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt: Date
    updatedAt: Date
    expireAt: Date
    _count: PaymentRequestCountAggregateOutputType | null
    _avg: PaymentRequestAvgAggregateOutputType | null
    _sum: PaymentRequestSumAggregateOutputType | null
    _min: PaymentRequestMinAggregateOutputType | null
    _max: PaymentRequestMaxAggregateOutputType | null
  }

  type GetPaymentRequestGroupByPayload<T extends PaymentRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentRequestGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentRequestGroupByOutputType[P]>
        }
      >
    >


  export type PaymentRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    telegramId?: boolean
    saleName?: boolean
    seqNo?: boolean
    code?: boolean
    status?: boolean
    amount?: boolean
    price?: boolean
    destination?: boolean
    method?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expireAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | SaleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentRequest"]>

  export type PaymentRequestSelectScalar = {
    telegramId?: boolean
    saleName?: boolean
    seqNo?: boolean
    code?: boolean
    status?: boolean
    amount?: boolean
    price?: boolean
    destination?: boolean
    method?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expireAt?: boolean
  }


  export type PaymentRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | SaleDefaultArgs<ExtArgs>
  }


  export type $PaymentRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sale: Prisma.$SalePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      telegramId: string
      saleName: string
      seqNo: number
      code: string
      status: $Enums.PaymentRequestStatus
      amount: number
      price: number
      destination: string
      method: $Enums.PaymentMethod
      createdAt: Date
      updatedAt: Date
      expireAt: Date
    }, ExtArgs["result"]["paymentRequest"]>
    composites: {}
  }


  type PaymentRequestGetPayload<S extends boolean | null | undefined | PaymentRequestDefaultArgs> = $Result.GetResult<Prisma.$PaymentRequestPayload, S>

  type PaymentRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentRequestCountAggregateInputType | true
    }

  export interface PaymentRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentRequest'], meta: { name: 'PaymentRequest' } }
    /**
     * Find zero or one PaymentRequest that matches the filter.
     * @param {PaymentRequestFindUniqueArgs} args - Arguments to find a PaymentRequest
     * @example
     * // Get one PaymentRequest
     * const paymentRequest = await prisma.paymentRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentRequestFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentRequestFindUniqueArgs<ExtArgs>>
    ): Prisma__PaymentRequestClient<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PaymentRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaymentRequestFindUniqueOrThrowArgs} args - Arguments to find a PaymentRequest
     * @example
     * // Get one PaymentRequest
     * const paymentRequest = await prisma.paymentRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentRequestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentRequestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentRequestClient<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PaymentRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentRequestFindFirstArgs} args - Arguments to find a PaymentRequest
     * @example
     * // Get one PaymentRequest
     * const paymentRequest = await prisma.paymentRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentRequestFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentRequestFindFirstArgs<ExtArgs>>
    ): Prisma__PaymentRequestClient<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PaymentRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentRequestFindFirstOrThrowArgs} args - Arguments to find a PaymentRequest
     * @example
     * // Get one PaymentRequest
     * const paymentRequest = await prisma.paymentRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentRequestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentRequestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentRequestClient<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PaymentRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentRequests
     * const paymentRequests = await prisma.paymentRequest.findMany()
     * 
     * // Get first 10 PaymentRequests
     * const paymentRequests = await prisma.paymentRequest.findMany({ take: 10 })
     * 
     * // Only select the `telegramId`
     * const paymentRequestWithTelegramIdOnly = await prisma.paymentRequest.findMany({ select: { telegramId: true } })
     * 
    **/
    findMany<T extends PaymentRequestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentRequestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PaymentRequest.
     * @param {PaymentRequestCreateArgs} args - Arguments to create a PaymentRequest.
     * @example
     * // Create one PaymentRequest
     * const PaymentRequest = await prisma.paymentRequest.create({
     *   data: {
     *     // ... data to create a PaymentRequest
     *   }
     * })
     * 
    **/
    create<T extends PaymentRequestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentRequestCreateArgs<ExtArgs>>
    ): Prisma__PaymentRequestClient<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PaymentRequests.
     *     @param {PaymentRequestCreateManyArgs} args - Arguments to create many PaymentRequests.
     *     @example
     *     // Create many PaymentRequests
     *     const paymentRequest = await prisma.paymentRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentRequestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentRequestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentRequest.
     * @param {PaymentRequestDeleteArgs} args - Arguments to delete one PaymentRequest.
     * @example
     * // Delete one PaymentRequest
     * const PaymentRequest = await prisma.paymentRequest.delete({
     *   where: {
     *     // ... filter to delete one PaymentRequest
     *   }
     * })
     * 
    **/
    delete<T extends PaymentRequestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentRequestDeleteArgs<ExtArgs>>
    ): Prisma__PaymentRequestClient<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PaymentRequest.
     * @param {PaymentRequestUpdateArgs} args - Arguments to update one PaymentRequest.
     * @example
     * // Update one PaymentRequest
     * const paymentRequest = await prisma.paymentRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentRequestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentRequestUpdateArgs<ExtArgs>>
    ): Prisma__PaymentRequestClient<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PaymentRequests.
     * @param {PaymentRequestDeleteManyArgs} args - Arguments to filter PaymentRequests to delete.
     * @example
     * // Delete a few PaymentRequests
     * const { count } = await prisma.paymentRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentRequestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentRequestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentRequests
     * const paymentRequest = await prisma.paymentRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentRequestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentRequestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentRequest.
     * @param {PaymentRequestUpsertArgs} args - Arguments to update or create a PaymentRequest.
     * @example
     * // Update or create a PaymentRequest
     * const paymentRequest = await prisma.paymentRequest.upsert({
     *   create: {
     *     // ... data to create a PaymentRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentRequest we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentRequestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentRequestUpsertArgs<ExtArgs>>
    ): Prisma__PaymentRequestClient<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PaymentRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentRequestCountArgs} args - Arguments to filter PaymentRequests to count.
     * @example
     * // Count the number of PaymentRequests
     * const count = await prisma.paymentRequest.count({
     *   where: {
     *     // ... the filter for the PaymentRequests we want to count
     *   }
     * })
    **/
    count<T extends PaymentRequestCountArgs>(
      args?: Subset<T, PaymentRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentRequestAggregateArgs>(args: Subset<T, PaymentRequestAggregateArgs>): Prisma.PrismaPromise<GetPaymentRequestAggregateType<T>>

    /**
     * Group by PaymentRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentRequestGroupByArgs['orderBy'] }
        : { orderBy?: PaymentRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentRequest model
   */
  readonly fields: PaymentRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    sale<T extends SaleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SaleDefaultArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PaymentRequest model
   */ 
  interface PaymentRequestFieldRefs {
    readonly telegramId: FieldRef<"PaymentRequest", 'String'>
    readonly saleName: FieldRef<"PaymentRequest", 'String'>
    readonly seqNo: FieldRef<"PaymentRequest", 'Int'>
    readonly code: FieldRef<"PaymentRequest", 'String'>
    readonly status: FieldRef<"PaymentRequest", 'PaymentRequestStatus'>
    readonly amount: FieldRef<"PaymentRequest", 'Int'>
    readonly price: FieldRef<"PaymentRequest", 'Float'>
    readonly destination: FieldRef<"PaymentRequest", 'String'>
    readonly method: FieldRef<"PaymentRequest", 'PaymentMethod'>
    readonly createdAt: FieldRef<"PaymentRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentRequest", 'DateTime'>
    readonly expireAt: FieldRef<"PaymentRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentRequest findUnique
   */
  export type PaymentRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * Filter, which PaymentRequest to fetch.
     */
    where: PaymentRequestWhereUniqueInput
  }

  /**
   * PaymentRequest findUniqueOrThrow
   */
  export type PaymentRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * Filter, which PaymentRequest to fetch.
     */
    where: PaymentRequestWhereUniqueInput
  }

  /**
   * PaymentRequest findFirst
   */
  export type PaymentRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * Filter, which PaymentRequest to fetch.
     */
    where?: PaymentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentRequests to fetch.
     */
    orderBy?: PaymentRequestOrderByWithRelationInput | PaymentRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentRequests.
     */
    cursor?: PaymentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentRequests.
     */
    distinct?: PaymentRequestScalarFieldEnum | PaymentRequestScalarFieldEnum[]
  }

  /**
   * PaymentRequest findFirstOrThrow
   */
  export type PaymentRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * Filter, which PaymentRequest to fetch.
     */
    where?: PaymentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentRequests to fetch.
     */
    orderBy?: PaymentRequestOrderByWithRelationInput | PaymentRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentRequests.
     */
    cursor?: PaymentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentRequests.
     */
    distinct?: PaymentRequestScalarFieldEnum | PaymentRequestScalarFieldEnum[]
  }

  /**
   * PaymentRequest findMany
   */
  export type PaymentRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * Filter, which PaymentRequests to fetch.
     */
    where?: PaymentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentRequests to fetch.
     */
    orderBy?: PaymentRequestOrderByWithRelationInput | PaymentRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentRequests.
     */
    cursor?: PaymentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentRequests.
     */
    skip?: number
    distinct?: PaymentRequestScalarFieldEnum | PaymentRequestScalarFieldEnum[]
  }

  /**
   * PaymentRequest create
   */
  export type PaymentRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentRequest.
     */
    data: XOR<PaymentRequestCreateInput, PaymentRequestUncheckedCreateInput>
  }

  /**
   * PaymentRequest createMany
   */
  export type PaymentRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentRequests.
     */
    data: PaymentRequestCreateManyInput | PaymentRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentRequest update
   */
  export type PaymentRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentRequest.
     */
    data: XOR<PaymentRequestUpdateInput, PaymentRequestUncheckedUpdateInput>
    /**
     * Choose, which PaymentRequest to update.
     */
    where: PaymentRequestWhereUniqueInput
  }

  /**
   * PaymentRequest updateMany
   */
  export type PaymentRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentRequests.
     */
    data: XOR<PaymentRequestUpdateManyMutationInput, PaymentRequestUncheckedUpdateManyInput>
    /**
     * Filter which PaymentRequests to update
     */
    where?: PaymentRequestWhereInput
  }

  /**
   * PaymentRequest upsert
   */
  export type PaymentRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentRequest to update in case it exists.
     */
    where: PaymentRequestWhereUniqueInput
    /**
     * In case the PaymentRequest found by the `where` argument doesn't exist, create a new PaymentRequest with this data.
     */
    create: XOR<PaymentRequestCreateInput, PaymentRequestUncheckedCreateInput>
    /**
     * In case the PaymentRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentRequestUpdateInput, PaymentRequestUncheckedUpdateInput>
  }

  /**
   * PaymentRequest delete
   */
  export type PaymentRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    /**
     * Filter which PaymentRequest to delete.
     */
    where: PaymentRequestWhereUniqueInput
  }

  /**
   * PaymentRequest deleteMany
   */
  export type PaymentRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentRequests to delete
     */
    where?: PaymentRequestWhereInput
  }

  /**
   * PaymentRequest without action
   */
  export type PaymentRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
  }


  /**
   * Model MerkleEntry
   */

  export type AggregateMerkleEntry = {
    _count: MerkleEntryCountAggregateOutputType | null
    _avg: MerkleEntryAvgAggregateOutputType | null
    _sum: MerkleEntrySumAggregateOutputType | null
    _min: MerkleEntryMinAggregateOutputType | null
    _max: MerkleEntryMaxAggregateOutputType | null
  }

  export type MerkleEntryAvgAggregateOutputType = {
    amount: number | null
  }

  export type MerkleEntrySumAggregateOutputType = {
    amount: number | null
  }

  export type MerkleEntryMinAggregateOutputType = {
    telegramId: string | null
    saleName: string | null
    address: string | null
    amount: number | null
  }

  export type MerkleEntryMaxAggregateOutputType = {
    telegramId: string | null
    saleName: string | null
    address: string | null
    amount: number | null
  }

  export type MerkleEntryCountAggregateOutputType = {
    telegramId: number
    saleName: number
    address: number
    amount: number
    _all: number
  }


  export type MerkleEntryAvgAggregateInputType = {
    amount?: true
  }

  export type MerkleEntrySumAggregateInputType = {
    amount?: true
  }

  export type MerkleEntryMinAggregateInputType = {
    telegramId?: true
    saleName?: true
    address?: true
    amount?: true
  }

  export type MerkleEntryMaxAggregateInputType = {
    telegramId?: true
    saleName?: true
    address?: true
    amount?: true
  }

  export type MerkleEntryCountAggregateInputType = {
    telegramId?: true
    saleName?: true
    address?: true
    amount?: true
    _all?: true
  }

  export type MerkleEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MerkleEntry to aggregate.
     */
    where?: MerkleEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleEntries to fetch.
     */
    orderBy?: MerkleEntryOrderByWithRelationInput | MerkleEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MerkleEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MerkleEntries
    **/
    _count?: true | MerkleEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MerkleEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MerkleEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerkleEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerkleEntryMaxAggregateInputType
  }

  export type GetMerkleEntryAggregateType<T extends MerkleEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateMerkleEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerkleEntry[P]>
      : GetScalarType<T[P], AggregateMerkleEntry[P]>
  }




  export type MerkleEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerkleEntryWhereInput
    orderBy?: MerkleEntryOrderByWithAggregationInput | MerkleEntryOrderByWithAggregationInput[]
    by: MerkleEntryScalarFieldEnum[] | MerkleEntryScalarFieldEnum
    having?: MerkleEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerkleEntryCountAggregateInputType | true
    _avg?: MerkleEntryAvgAggregateInputType
    _sum?: MerkleEntrySumAggregateInputType
    _min?: MerkleEntryMinAggregateInputType
    _max?: MerkleEntryMaxAggregateInputType
  }

  export type MerkleEntryGroupByOutputType = {
    telegramId: string
    saleName: string
    address: string | null
    amount: number
    _count: MerkleEntryCountAggregateOutputType | null
    _avg: MerkleEntryAvgAggregateOutputType | null
    _sum: MerkleEntrySumAggregateOutputType | null
    _min: MerkleEntryMinAggregateOutputType | null
    _max: MerkleEntryMaxAggregateOutputType | null
  }

  type GetMerkleEntryGroupByPayload<T extends MerkleEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerkleEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerkleEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerkleEntryGroupByOutputType[P]>
            : GetScalarType<T[P], MerkleEntryGroupByOutputType[P]>
        }
      >
    >


  export type MerkleEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    telegramId?: boolean
    saleName?: boolean
    address?: boolean
    amount?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | SaleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merkleEntry"]>

  export type MerkleEntrySelectScalar = {
    telegramId?: boolean
    saleName?: boolean
    address?: boolean
    amount?: boolean
  }


  export type MerkleEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | SaleDefaultArgs<ExtArgs>
  }


  export type $MerkleEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MerkleEntry"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sale: Prisma.$SalePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      telegramId: string
      saleName: string
      address: string | null
      amount: number
    }, ExtArgs["result"]["merkleEntry"]>
    composites: {}
  }


  type MerkleEntryGetPayload<S extends boolean | null | undefined | MerkleEntryDefaultArgs> = $Result.GetResult<Prisma.$MerkleEntryPayload, S>

  type MerkleEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MerkleEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MerkleEntryCountAggregateInputType | true
    }

  export interface MerkleEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MerkleEntry'], meta: { name: 'MerkleEntry' } }
    /**
     * Find zero or one MerkleEntry that matches the filter.
     * @param {MerkleEntryFindUniqueArgs} args - Arguments to find a MerkleEntry
     * @example
     * // Get one MerkleEntry
     * const merkleEntry = await prisma.merkleEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MerkleEntryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleEntryFindUniqueArgs<ExtArgs>>
    ): Prisma__MerkleEntryClient<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MerkleEntry that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MerkleEntryFindUniqueOrThrowArgs} args - Arguments to find a MerkleEntry
     * @example
     * // Get one MerkleEntry
     * const merkleEntry = await prisma.merkleEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MerkleEntryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleEntryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MerkleEntryClient<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MerkleEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleEntryFindFirstArgs} args - Arguments to find a MerkleEntry
     * @example
     * // Get one MerkleEntry
     * const merkleEntry = await prisma.merkleEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MerkleEntryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleEntryFindFirstArgs<ExtArgs>>
    ): Prisma__MerkleEntryClient<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MerkleEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleEntryFindFirstOrThrowArgs} args - Arguments to find a MerkleEntry
     * @example
     * // Get one MerkleEntry
     * const merkleEntry = await prisma.merkleEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MerkleEntryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleEntryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MerkleEntryClient<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MerkleEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleEntryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MerkleEntries
     * const merkleEntries = await prisma.merkleEntry.findMany()
     * 
     * // Get first 10 MerkleEntries
     * const merkleEntries = await prisma.merkleEntry.findMany({ take: 10 })
     * 
     * // Only select the `telegramId`
     * const merkleEntryWithTelegramIdOnly = await prisma.merkleEntry.findMany({ select: { telegramId: true } })
     * 
    **/
    findMany<T extends MerkleEntryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleEntryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MerkleEntry.
     * @param {MerkleEntryCreateArgs} args - Arguments to create a MerkleEntry.
     * @example
     * // Create one MerkleEntry
     * const MerkleEntry = await prisma.merkleEntry.create({
     *   data: {
     *     // ... data to create a MerkleEntry
     *   }
     * })
     * 
    **/
    create<T extends MerkleEntryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleEntryCreateArgs<ExtArgs>>
    ): Prisma__MerkleEntryClient<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MerkleEntries.
     *     @param {MerkleEntryCreateManyArgs} args - Arguments to create many MerkleEntries.
     *     @example
     *     // Create many MerkleEntries
     *     const merkleEntry = await prisma.merkleEntry.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MerkleEntryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleEntryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MerkleEntry.
     * @param {MerkleEntryDeleteArgs} args - Arguments to delete one MerkleEntry.
     * @example
     * // Delete one MerkleEntry
     * const MerkleEntry = await prisma.merkleEntry.delete({
     *   where: {
     *     // ... filter to delete one MerkleEntry
     *   }
     * })
     * 
    **/
    delete<T extends MerkleEntryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleEntryDeleteArgs<ExtArgs>>
    ): Prisma__MerkleEntryClient<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MerkleEntry.
     * @param {MerkleEntryUpdateArgs} args - Arguments to update one MerkleEntry.
     * @example
     * // Update one MerkleEntry
     * const merkleEntry = await prisma.merkleEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MerkleEntryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleEntryUpdateArgs<ExtArgs>>
    ): Prisma__MerkleEntryClient<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MerkleEntries.
     * @param {MerkleEntryDeleteManyArgs} args - Arguments to filter MerkleEntries to delete.
     * @example
     * // Delete a few MerkleEntries
     * const { count } = await prisma.merkleEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MerkleEntryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleEntryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MerkleEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MerkleEntries
     * const merkleEntry = await prisma.merkleEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MerkleEntryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleEntryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MerkleEntry.
     * @param {MerkleEntryUpsertArgs} args - Arguments to update or create a MerkleEntry.
     * @example
     * // Update or create a MerkleEntry
     * const merkleEntry = await prisma.merkleEntry.upsert({
     *   create: {
     *     // ... data to create a MerkleEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MerkleEntry we want to update
     *   }
     * })
    **/
    upsert<T extends MerkleEntryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleEntryUpsertArgs<ExtArgs>>
    ): Prisma__MerkleEntryClient<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MerkleEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleEntryCountArgs} args - Arguments to filter MerkleEntries to count.
     * @example
     * // Count the number of MerkleEntries
     * const count = await prisma.merkleEntry.count({
     *   where: {
     *     // ... the filter for the MerkleEntries we want to count
     *   }
     * })
    **/
    count<T extends MerkleEntryCountArgs>(
      args?: Subset<T, MerkleEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerkleEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MerkleEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerkleEntryAggregateArgs>(args: Subset<T, MerkleEntryAggregateArgs>): Prisma.PrismaPromise<GetMerkleEntryAggregateType<T>>

    /**
     * Group by MerkleEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MerkleEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MerkleEntryGroupByArgs['orderBy'] }
        : { orderBy?: MerkleEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MerkleEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerkleEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MerkleEntry model
   */
  readonly fields: MerkleEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MerkleEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MerkleEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    sale<T extends SaleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SaleDefaultArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MerkleEntry model
   */ 
  interface MerkleEntryFieldRefs {
    readonly telegramId: FieldRef<"MerkleEntry", 'String'>
    readonly saleName: FieldRef<"MerkleEntry", 'String'>
    readonly address: FieldRef<"MerkleEntry", 'String'>
    readonly amount: FieldRef<"MerkleEntry", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MerkleEntry findUnique
   */
  export type MerkleEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * Filter, which MerkleEntry to fetch.
     */
    where: MerkleEntryWhereUniqueInput
  }

  /**
   * MerkleEntry findUniqueOrThrow
   */
  export type MerkleEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * Filter, which MerkleEntry to fetch.
     */
    where: MerkleEntryWhereUniqueInput
  }

  /**
   * MerkleEntry findFirst
   */
  export type MerkleEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * Filter, which MerkleEntry to fetch.
     */
    where?: MerkleEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleEntries to fetch.
     */
    orderBy?: MerkleEntryOrderByWithRelationInput | MerkleEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MerkleEntries.
     */
    cursor?: MerkleEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MerkleEntries.
     */
    distinct?: MerkleEntryScalarFieldEnum | MerkleEntryScalarFieldEnum[]
  }

  /**
   * MerkleEntry findFirstOrThrow
   */
  export type MerkleEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * Filter, which MerkleEntry to fetch.
     */
    where?: MerkleEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleEntries to fetch.
     */
    orderBy?: MerkleEntryOrderByWithRelationInput | MerkleEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MerkleEntries.
     */
    cursor?: MerkleEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MerkleEntries.
     */
    distinct?: MerkleEntryScalarFieldEnum | MerkleEntryScalarFieldEnum[]
  }

  /**
   * MerkleEntry findMany
   */
  export type MerkleEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * Filter, which MerkleEntries to fetch.
     */
    where?: MerkleEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleEntries to fetch.
     */
    orderBy?: MerkleEntryOrderByWithRelationInput | MerkleEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MerkleEntries.
     */
    cursor?: MerkleEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleEntries.
     */
    skip?: number
    distinct?: MerkleEntryScalarFieldEnum | MerkleEntryScalarFieldEnum[]
  }

  /**
   * MerkleEntry create
   */
  export type MerkleEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a MerkleEntry.
     */
    data: XOR<MerkleEntryCreateInput, MerkleEntryUncheckedCreateInput>
  }

  /**
   * MerkleEntry createMany
   */
  export type MerkleEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MerkleEntries.
     */
    data: MerkleEntryCreateManyInput | MerkleEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MerkleEntry update
   */
  export type MerkleEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a MerkleEntry.
     */
    data: XOR<MerkleEntryUpdateInput, MerkleEntryUncheckedUpdateInput>
    /**
     * Choose, which MerkleEntry to update.
     */
    where: MerkleEntryWhereUniqueInput
  }

  /**
   * MerkleEntry updateMany
   */
  export type MerkleEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MerkleEntries.
     */
    data: XOR<MerkleEntryUpdateManyMutationInput, MerkleEntryUncheckedUpdateManyInput>
    /**
     * Filter which MerkleEntries to update
     */
    where?: MerkleEntryWhereInput
  }

  /**
   * MerkleEntry upsert
   */
  export type MerkleEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the MerkleEntry to update in case it exists.
     */
    where: MerkleEntryWhereUniqueInput
    /**
     * In case the MerkleEntry found by the `where` argument doesn't exist, create a new MerkleEntry with this data.
     */
    create: XOR<MerkleEntryCreateInput, MerkleEntryUncheckedCreateInput>
    /**
     * In case the MerkleEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MerkleEntryUpdateInput, MerkleEntryUncheckedUpdateInput>
  }

  /**
   * MerkleEntry delete
   */
  export type MerkleEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    /**
     * Filter which MerkleEntry to delete.
     */
    where: MerkleEntryWhereUniqueInput
  }

  /**
   * MerkleEntry deleteMany
   */
  export type MerkleEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MerkleEntries to delete
     */
    where?: MerkleEntryWhereInput
  }

  /**
   * MerkleEntry without action
   */
  export type MerkleEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
  }


  /**
   * Model Sale
   */

  export type AggregateSale = {
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  export type SaleAvgAggregateOutputType = {
    phases: number | null
    tokensPerPhase: number | null
    initialPrice: Decimal | null
    priceIncrement: Decimal | null
    pausedTime: number | null
    pendingOrderAmount: number | null
    totalSold: number | null
    totalRewards: number | null
  }

  export type SaleSumAggregateOutputType = {
    phases: number | null
    tokensPerPhase: number[]
    initialPrice: Decimal | null
    priceIncrement: Decimal[]
    pausedTime: number | null
    pendingOrderAmount: number | null
    totalSold: number | null
    totalRewards: number | null
  }

  export type SaleMinAggregateOutputType = {
    name: string | null
    status: $Enums.SaleStatus | null
    isReceivingAddressEditable: boolean | null
    phases: number | null
    initialPrice: Decimal | null
    start: Date | null
    end: Date | null
    pausedTime: number | null
    pendingOrderAmount: number | null
    totalSold: number | null
    totalRewards: number | null
    createdAt: Date | null
    pausedAt: Date | null
  }

  export type SaleMaxAggregateOutputType = {
    name: string | null
    status: $Enums.SaleStatus | null
    isReceivingAddressEditable: boolean | null
    phases: number | null
    initialPrice: Decimal | null
    start: Date | null
    end: Date | null
    pausedTime: number | null
    pendingOrderAmount: number | null
    totalSold: number | null
    totalRewards: number | null
    createdAt: Date | null
    pausedAt: Date | null
  }

  export type SaleCountAggregateOutputType = {
    name: number
    status: number
    isReceivingAddressEditable: number
    phases: number
    tokensPerPhase: number
    initialPrice: number
    priceIncrement: number
    start: number
    end: number
    pausedTime: number
    pendingOrderAmount: number
    totalSold: number
    totalRewards: number
    createdAt: number
    pausedAt: number
    _all: number
  }


  export type SaleAvgAggregateInputType = {
    phases?: true
    tokensPerPhase?: true
    initialPrice?: true
    priceIncrement?: true
    pausedTime?: true
    pendingOrderAmount?: true
    totalSold?: true
    totalRewards?: true
  }

  export type SaleSumAggregateInputType = {
    phases?: true
    tokensPerPhase?: true
    initialPrice?: true
    priceIncrement?: true
    pausedTime?: true
    pendingOrderAmount?: true
    totalSold?: true
    totalRewards?: true
  }

  export type SaleMinAggregateInputType = {
    name?: true
    status?: true
    isReceivingAddressEditable?: true
    phases?: true
    initialPrice?: true
    start?: true
    end?: true
    pausedTime?: true
    pendingOrderAmount?: true
    totalSold?: true
    totalRewards?: true
    createdAt?: true
    pausedAt?: true
  }

  export type SaleMaxAggregateInputType = {
    name?: true
    status?: true
    isReceivingAddressEditable?: true
    phases?: true
    initialPrice?: true
    start?: true
    end?: true
    pausedTime?: true
    pendingOrderAmount?: true
    totalSold?: true
    totalRewards?: true
    createdAt?: true
    pausedAt?: true
  }

  export type SaleCountAggregateInputType = {
    name?: true
    status?: true
    isReceivingAddressEditable?: true
    phases?: true
    tokensPerPhase?: true
    initialPrice?: true
    priceIncrement?: true
    start?: true
    end?: true
    pausedTime?: true
    pendingOrderAmount?: true
    totalSold?: true
    totalRewards?: true
    createdAt?: true
    pausedAt?: true
    _all?: true
  }

  export type SaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sale to aggregate.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sales
    **/
    _count?: true | SaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleMaxAggregateInputType
  }

  export type GetSaleAggregateType<T extends SaleAggregateArgs> = {
        [P in keyof T & keyof AggregateSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSale[P]>
      : GetScalarType<T[P], AggregateSale[P]>
  }




  export type SaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithAggregationInput | SaleOrderByWithAggregationInput[]
    by: SaleScalarFieldEnum[] | SaleScalarFieldEnum
    having?: SaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleCountAggregateInputType | true
    _avg?: SaleAvgAggregateInputType
    _sum?: SaleSumAggregateInputType
    _min?: SaleMinAggregateInputType
    _max?: SaleMaxAggregateInputType
  }

  export type SaleGroupByOutputType = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable: boolean
    phases: number
    tokensPerPhase: number[]
    initialPrice: Decimal
    priceIncrement: Decimal[]
    start: Date | null
    end: Date | null
    pausedTime: number
    pendingOrderAmount: number
    totalSold: number
    totalRewards: number
    createdAt: Date
    pausedAt: Date | null
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  type GetSaleGroupByPayload<T extends SaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleGroupByOutputType[P]>
            : GetScalarType<T[P], SaleGroupByOutputType[P]>
        }
      >
    >


  export type SaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    status?: boolean
    isReceivingAddressEditable?: boolean
    phases?: boolean
    tokensPerPhase?: boolean
    initialPrice?: boolean
    priceIncrement?: boolean
    start?: boolean
    end?: boolean
    pausedTime?: boolean
    pendingOrderAmount?: boolean
    totalSold?: boolean
    totalRewards?: boolean
    createdAt?: boolean
    pausedAt?: boolean
    purchases?: boolean | Sale$purchasesArgs<ExtArgs>
    rewards?: boolean | Sale$rewardsArgs<ExtArgs>
    paymentRequests?: boolean | Sale$paymentRequestsArgs<ExtArgs>
    merkleEntries?: boolean | Sale$merkleEntriesArgs<ExtArgs>
    _count?: boolean | SaleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectScalar = {
    name?: boolean
    status?: boolean
    isReceivingAddressEditable?: boolean
    phases?: boolean
    tokensPerPhase?: boolean
    initialPrice?: boolean
    priceIncrement?: boolean
    start?: boolean
    end?: boolean
    pausedTime?: boolean
    pendingOrderAmount?: boolean
    totalSold?: boolean
    totalRewards?: boolean
    createdAt?: boolean
    pausedAt?: boolean
  }


  export type SaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchases?: boolean | Sale$purchasesArgs<ExtArgs>
    rewards?: boolean | Sale$rewardsArgs<ExtArgs>
    paymentRequests?: boolean | Sale$paymentRequestsArgs<ExtArgs>
    merkleEntries?: boolean | Sale$merkleEntriesArgs<ExtArgs>
    _count?: boolean | SaleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sale"
    objects: {
      purchases: Prisma.$PurchasePayload<ExtArgs>[]
      rewards: Prisma.$RewardPayload<ExtArgs>[]
      paymentRequests: Prisma.$PaymentRequestPayload<ExtArgs>[]
      merkleEntries: Prisma.$MerkleEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      status: $Enums.SaleStatus
      isReceivingAddressEditable: boolean
      phases: number
      tokensPerPhase: number[]
      initialPrice: Prisma.Decimal
      priceIncrement: Prisma.Decimal[]
      start: Date | null
      end: Date | null
      pausedTime: number
      pendingOrderAmount: number
      totalSold: number
      totalRewards: number
      createdAt: Date
      pausedAt: Date | null
    }, ExtArgs["result"]["sale"]>
    composites: {}
  }


  type SaleGetPayload<S extends boolean | null | undefined | SaleDefaultArgs> = $Result.GetResult<Prisma.$SalePayload, S>

  type SaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SaleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SaleCountAggregateInputType | true
    }

  export interface SaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sale'], meta: { name: 'Sale' } }
    /**
     * Find zero or one Sale that matches the filter.
     * @param {SaleFindUniqueArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SaleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SaleFindUniqueArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sale that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SaleFindUniqueOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SaleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SaleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleFindFirstArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SaleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sale.findMany()
     * 
     * // Get first 10 Sales
     * const sales = await prisma.sale.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const saleWithNameOnly = await prisma.sale.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends SaleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sale.
     * @param {SaleCreateArgs} args - Arguments to create a Sale.
     * @example
     * // Create one Sale
     * const Sale = await prisma.sale.create({
     *   data: {
     *     // ... data to create a Sale
     *   }
     * })
     * 
    **/
    create<T extends SaleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SaleCreateArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sales.
     *     @param {SaleCreateManyArgs} args - Arguments to create many Sales.
     *     @example
     *     // Create many Sales
     *     const sale = await prisma.sale.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SaleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sale.
     * @param {SaleDeleteArgs} args - Arguments to delete one Sale.
     * @example
     * // Delete one Sale
     * const Sale = await prisma.sale.delete({
     *   where: {
     *     // ... filter to delete one Sale
     *   }
     * })
     * 
    **/
    delete<T extends SaleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SaleDeleteArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sale.
     * @param {SaleUpdateArgs} args - Arguments to update one Sale.
     * @example
     * // Update one Sale
     * const sale = await prisma.sale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SaleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SaleUpdateArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sales.
     * @param {SaleDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SaleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SaleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SaleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sale.
     * @param {SaleUpsertArgs} args - Arguments to update or create a Sale.
     * @example
     * // Update or create a Sale
     * const sale = await prisma.sale.upsert({
     *   create: {
     *     // ... data to create a Sale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sale we want to update
     *   }
     * })
    **/
    upsert<T extends SaleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SaleUpsertArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sale.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
    **/
    count<T extends SaleCountArgs>(
      args?: Subset<T, SaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleAggregateArgs>(args: Subset<T, SaleAggregateArgs>): Prisma.PrismaPromise<GetSaleAggregateType<T>>

    /**
     * Group by Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleGroupByArgs['orderBy'] }
        : { orderBy?: SaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sale model
   */
  readonly fields: SaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    purchases<T extends Sale$purchasesArgs<ExtArgs> = {}>(args?: Subset<T, Sale$purchasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'findMany'> | Null>;

    rewards<T extends Sale$rewardsArgs<ExtArgs> = {}>(args?: Subset<T, Sale$rewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findMany'> | Null>;

    paymentRequests<T extends Sale$paymentRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Sale$paymentRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentRequestPayload<ExtArgs>, T, 'findMany'> | Null>;

    merkleEntries<T extends Sale$merkleEntriesArgs<ExtArgs> = {}>(args?: Subset<T, Sale$merkleEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerkleEntryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sale model
   */ 
  interface SaleFieldRefs {
    readonly name: FieldRef<"Sale", 'String'>
    readonly status: FieldRef<"Sale", 'SaleStatus'>
    readonly isReceivingAddressEditable: FieldRef<"Sale", 'Boolean'>
    readonly phases: FieldRef<"Sale", 'Int'>
    readonly tokensPerPhase: FieldRef<"Sale", 'Int[]'>
    readonly initialPrice: FieldRef<"Sale", 'Decimal'>
    readonly priceIncrement: FieldRef<"Sale", 'Decimal[]'>
    readonly start: FieldRef<"Sale", 'DateTime'>
    readonly end: FieldRef<"Sale", 'DateTime'>
    readonly pausedTime: FieldRef<"Sale", 'Int'>
    readonly pendingOrderAmount: FieldRef<"Sale", 'Int'>
    readonly totalSold: FieldRef<"Sale", 'Int'>
    readonly totalRewards: FieldRef<"Sale", 'Int'>
    readonly createdAt: FieldRef<"Sale", 'DateTime'>
    readonly pausedAt: FieldRef<"Sale", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sale findUnique
   */
  export type SaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale findUniqueOrThrow
   */
  export type SaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale findFirst
   */
  export type SaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale findFirstOrThrow
   */
  export type SaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale findMany
   */
  export type SaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale create
   */
  export type SaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The data needed to create a Sale.
     */
    data: XOR<SaleCreateInput, SaleUncheckedCreateInput>
  }

  /**
   * Sale createMany
   */
  export type SaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sales.
     */
    data: SaleCreateManyInput | SaleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sale update
   */
  export type SaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The data needed to update a Sale.
     */
    data: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>
    /**
     * Choose, which Sale to update.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale updateMany
   */
  export type SaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sales.
     */
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyInput>
    /**
     * Filter which Sales to update
     */
    where?: SaleWhereInput
  }

  /**
   * Sale upsert
   */
  export type SaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The filter to search for the Sale to update in case it exists.
     */
    where: SaleWhereUniqueInput
    /**
     * In case the Sale found by the `where` argument doesn't exist, create a new Sale with this data.
     */
    create: XOR<SaleCreateInput, SaleUncheckedCreateInput>
    /**
     * In case the Sale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>
  }

  /**
   * Sale delete
   */
  export type SaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter which Sale to delete.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale deleteMany
   */
  export type SaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sales to delete
     */
    where?: SaleWhereInput
  }

  /**
   * Sale.purchases
   */
  export type Sale$purchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    where?: PurchaseWhereInput
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    cursor?: PurchaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Sale.rewards
   */
  export type Sale$rewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    cursor?: RewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Sale.paymentRequests
   */
  export type Sale$paymentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentRequest
     */
    select?: PaymentRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentRequestInclude<ExtArgs> | null
    where?: PaymentRequestWhereInput
    orderBy?: PaymentRequestOrderByWithRelationInput | PaymentRequestOrderByWithRelationInput[]
    cursor?: PaymentRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentRequestScalarFieldEnum | PaymentRequestScalarFieldEnum[]
  }

  /**
   * Sale.merkleEntries
   */
  export type Sale$merkleEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleEntry
     */
    select?: MerkleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerkleEntryInclude<ExtArgs> | null
    where?: MerkleEntryWhereInput
    orderBy?: MerkleEntryOrderByWithRelationInput | MerkleEntryOrderByWithRelationInput[]
    cursor?: MerkleEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerkleEntryScalarFieldEnum | MerkleEntryScalarFieldEnum[]
  }

  /**
   * Sale without action
   */
  export type SaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
  }


  /**
   * Model Purchase
   */

  export type AggregatePurchase = {
    _count: PurchaseCountAggregateOutputType | null
    _avg: PurchaseAvgAggregateOutputType | null
    _sum: PurchaseSumAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  export type PurchaseAvgAggregateOutputType = {
    amount: number | null
  }

  export type PurchaseSumAggregateOutputType = {
    amount: number | null
  }

  export type PurchaseMinAggregateOutputType = {
    telegramId: string | null
    saleName: string | null
    amount: number | null
    createdAt: Date | null
  }

  export type PurchaseMaxAggregateOutputType = {
    telegramId: string | null
    saleName: string | null
    amount: number | null
    createdAt: Date | null
  }

  export type PurchaseCountAggregateOutputType = {
    telegramId: number
    saleName: number
    amount: number
    createdAt: number
    _all: number
  }


  export type PurchaseAvgAggregateInputType = {
    amount?: true
  }

  export type PurchaseSumAggregateInputType = {
    amount?: true
  }

  export type PurchaseMinAggregateInputType = {
    telegramId?: true
    saleName?: true
    amount?: true
    createdAt?: true
  }

  export type PurchaseMaxAggregateInputType = {
    telegramId?: true
    saleName?: true
    amount?: true
    createdAt?: true
  }

  export type PurchaseCountAggregateInputType = {
    telegramId?: true
    saleName?: true
    amount?: true
    createdAt?: true
    _all?: true
  }

  export type PurchaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Purchase to aggregate.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Purchases
    **/
    _count?: true | PurchaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseMaxAggregateInputType
  }

  export type GetPurchaseAggregateType<T extends PurchaseAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchase[P]>
      : GetScalarType<T[P], AggregatePurchase[P]>
  }




  export type PurchaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseWhereInput
    orderBy?: PurchaseOrderByWithAggregationInput | PurchaseOrderByWithAggregationInput[]
    by: PurchaseScalarFieldEnum[] | PurchaseScalarFieldEnum
    having?: PurchaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseCountAggregateInputType | true
    _avg?: PurchaseAvgAggregateInputType
    _sum?: PurchaseSumAggregateInputType
    _min?: PurchaseMinAggregateInputType
    _max?: PurchaseMaxAggregateInputType
  }

  export type PurchaseGroupByOutputType = {
    telegramId: string
    saleName: string
    amount: number
    createdAt: Date
    _count: PurchaseCountAggregateOutputType | null
    _avg: PurchaseAvgAggregateOutputType | null
    _sum: PurchaseSumAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  type GetPurchaseGroupByPayload<T extends PurchaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    telegramId?: boolean
    saleName?: boolean
    amount?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | SaleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchase"]>

  export type PurchaseSelectScalar = {
    telegramId?: boolean
    saleName?: boolean
    amount?: boolean
    createdAt?: boolean
  }


  export type PurchaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | SaleDefaultArgs<ExtArgs>
  }


  export type $PurchasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Purchase"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sale: Prisma.$SalePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      telegramId: string
      saleName: string
      amount: number
      createdAt: Date
    }, ExtArgs["result"]["purchase"]>
    composites: {}
  }


  type PurchaseGetPayload<S extends boolean | null | undefined | PurchaseDefaultArgs> = $Result.GetResult<Prisma.$PurchasePayload, S>

  type PurchaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PurchaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PurchaseCountAggregateInputType | true
    }

  export interface PurchaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Purchase'], meta: { name: 'Purchase' } }
    /**
     * Find zero or one Purchase that matches the filter.
     * @param {PurchaseFindUniqueArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PurchaseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseFindUniqueArgs<ExtArgs>>
    ): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Purchase that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PurchaseFindUniqueOrThrowArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PurchaseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Purchase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PurchaseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseFindFirstArgs<ExtArgs>>
    ): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Purchase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstOrThrowArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PurchaseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Purchases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Purchases
     * const purchases = await prisma.purchase.findMany()
     * 
     * // Get first 10 Purchases
     * const purchases = await prisma.purchase.findMany({ take: 10 })
     * 
     * // Only select the `telegramId`
     * const purchaseWithTelegramIdOnly = await prisma.purchase.findMany({ select: { telegramId: true } })
     * 
    **/
    findMany<T extends PurchaseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Purchase.
     * @param {PurchaseCreateArgs} args - Arguments to create a Purchase.
     * @example
     * // Create one Purchase
     * const Purchase = await prisma.purchase.create({
     *   data: {
     *     // ... data to create a Purchase
     *   }
     * })
     * 
    **/
    create<T extends PurchaseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseCreateArgs<ExtArgs>>
    ): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Purchases.
     *     @param {PurchaseCreateManyArgs} args - Arguments to create many Purchases.
     *     @example
     *     // Create many Purchases
     *     const purchase = await prisma.purchase.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PurchaseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Purchase.
     * @param {PurchaseDeleteArgs} args - Arguments to delete one Purchase.
     * @example
     * // Delete one Purchase
     * const Purchase = await prisma.purchase.delete({
     *   where: {
     *     // ... filter to delete one Purchase
     *   }
     * })
     * 
    **/
    delete<T extends PurchaseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseDeleteArgs<ExtArgs>>
    ): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Purchase.
     * @param {PurchaseUpdateArgs} args - Arguments to update one Purchase.
     * @example
     * // Update one Purchase
     * const purchase = await prisma.purchase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PurchaseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseUpdateArgs<ExtArgs>>
    ): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Purchases.
     * @param {PurchaseDeleteManyArgs} args - Arguments to filter Purchases to delete.
     * @example
     * // Delete a few Purchases
     * const { count } = await prisma.purchase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PurchaseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Purchases
     * const purchase = await prisma.purchase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PurchaseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Purchase.
     * @param {PurchaseUpsertArgs} args - Arguments to update or create a Purchase.
     * @example
     * // Update or create a Purchase
     * const purchase = await prisma.purchase.upsert({
     *   create: {
     *     // ... data to create a Purchase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Purchase we want to update
     *   }
     * })
    **/
    upsert<T extends PurchaseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseUpsertArgs<ExtArgs>>
    ): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseCountArgs} args - Arguments to filter Purchases to count.
     * @example
     * // Count the number of Purchases
     * const count = await prisma.purchase.count({
     *   where: {
     *     // ... the filter for the Purchases we want to count
     *   }
     * })
    **/
    count<T extends PurchaseCountArgs>(
      args?: Subset<T, PurchaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseAggregateArgs>(args: Subset<T, PurchaseAggregateArgs>): Prisma.PrismaPromise<GetPurchaseAggregateType<T>>

    /**
     * Group by Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Purchase model
   */
  readonly fields: PurchaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Purchase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    sale<T extends SaleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SaleDefaultArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Purchase model
   */ 
  interface PurchaseFieldRefs {
    readonly telegramId: FieldRef<"Purchase", 'String'>
    readonly saleName: FieldRef<"Purchase", 'String'>
    readonly amount: FieldRef<"Purchase", 'Int'>
    readonly createdAt: FieldRef<"Purchase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Purchase findUnique
   */
  export type PurchaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase findUniqueOrThrow
   */
  export type PurchaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase findFirst
   */
  export type PurchaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
     */
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase findFirstOrThrow
   */
  export type PurchaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
     */
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase findMany
   */
  export type PurchaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchases to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase create
   */
  export type PurchaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Purchase.
     */
    data: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
  }

  /**
   * Purchase createMany
   */
  export type PurchaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Purchases.
     */
    data: PurchaseCreateManyInput | PurchaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Purchase update
   */
  export type PurchaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Purchase.
     */
    data: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
    /**
     * Choose, which Purchase to update.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase updateMany
   */
  export type PurchaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Purchases.
     */
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyInput>
    /**
     * Filter which Purchases to update
     */
    where?: PurchaseWhereInput
  }

  /**
   * Purchase upsert
   */
  export type PurchaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Purchase to update in case it exists.
     */
    where: PurchaseWhereUniqueInput
    /**
     * In case the Purchase found by the `where` argument doesn't exist, create a new Purchase with this data.
     */
    create: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
    /**
     * In case the Purchase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
  }

  /**
   * Purchase delete
   */
  export type PurchaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter which Purchase to delete.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase deleteMany
   */
  export type PurchaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Purchases to delete
     */
    where?: PurchaseWhereInput
  }

  /**
   * Purchase without action
   */
  export type PurchaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
  }


  /**
   * Model Reward
   */

  export type AggregateReward = {
    _count: RewardCountAggregateOutputType | null
    _avg: RewardAvgAggregateOutputType | null
    _sum: RewardSumAggregateOutputType | null
    _min: RewardMinAggregateOutputType | null
    _max: RewardMaxAggregateOutputType | null
  }

  export type RewardAvgAggregateOutputType = {
    referralLevel: number | null
    amount: number | null
  }

  export type RewardSumAggregateOutputType = {
    referralLevel: number | null
    amount: number | null
  }

  export type RewardMinAggregateOutputType = {
    telegramId: string | null
    saleName: string | null
    refereeId: string | null
    referralLevel: number | null
    amount: number | null
    createdAt: Date | null
  }

  export type RewardMaxAggregateOutputType = {
    telegramId: string | null
    saleName: string | null
    refereeId: string | null
    referralLevel: number | null
    amount: number | null
    createdAt: Date | null
  }

  export type RewardCountAggregateOutputType = {
    telegramId: number
    saleName: number
    refereeId: number
    referralLevel: number
    amount: number
    createdAt: number
    _all: number
  }


  export type RewardAvgAggregateInputType = {
    referralLevel?: true
    amount?: true
  }

  export type RewardSumAggregateInputType = {
    referralLevel?: true
    amount?: true
  }

  export type RewardMinAggregateInputType = {
    telegramId?: true
    saleName?: true
    refereeId?: true
    referralLevel?: true
    amount?: true
    createdAt?: true
  }

  export type RewardMaxAggregateInputType = {
    telegramId?: true
    saleName?: true
    refereeId?: true
    referralLevel?: true
    amount?: true
    createdAt?: true
  }

  export type RewardCountAggregateInputType = {
    telegramId?: true
    saleName?: true
    refereeId?: true
    referralLevel?: true
    amount?: true
    createdAt?: true
    _all?: true
  }

  export type RewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reward to aggregate.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rewards
    **/
    _count?: true | RewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RewardMaxAggregateInputType
  }

  export type GetRewardAggregateType<T extends RewardAggregateArgs> = {
        [P in keyof T & keyof AggregateReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReward[P]>
      : GetScalarType<T[P], AggregateReward[P]>
  }




  export type RewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithAggregationInput | RewardOrderByWithAggregationInput[]
    by: RewardScalarFieldEnum[] | RewardScalarFieldEnum
    having?: RewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RewardCountAggregateInputType | true
    _avg?: RewardAvgAggregateInputType
    _sum?: RewardSumAggregateInputType
    _min?: RewardMinAggregateInputType
    _max?: RewardMaxAggregateInputType
  }

  export type RewardGroupByOutputType = {
    telegramId: string
    saleName: string
    refereeId: string
    referralLevel: number
    amount: number
    createdAt: Date
    _count: RewardCountAggregateOutputType | null
    _avg: RewardAvgAggregateOutputType | null
    _sum: RewardSumAggregateOutputType | null
    _min: RewardMinAggregateOutputType | null
    _max: RewardMaxAggregateOutputType | null
  }

  type GetRewardGroupByPayload<T extends RewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RewardGroupByOutputType[P]>
            : GetScalarType<T[P], RewardGroupByOutputType[P]>
        }
      >
    >


  export type RewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    telegramId?: boolean
    saleName?: boolean
    refereeId?: boolean
    referralLevel?: boolean
    amount?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    referee?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | SaleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reward"]>

  export type RewardSelectScalar = {
    telegramId?: boolean
    saleName?: boolean
    refereeId?: boolean
    referralLevel?: boolean
    amount?: boolean
    createdAt?: boolean
  }


  export type RewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    referee?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | SaleDefaultArgs<ExtArgs>
  }


  export type $RewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reward"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      referee: Prisma.$UserPayload<ExtArgs>
      sale: Prisma.$SalePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      telegramId: string
      saleName: string
      refereeId: string
      referralLevel: number
      amount: number
      createdAt: Date
    }, ExtArgs["result"]["reward"]>
    composites: {}
  }


  type RewardGetPayload<S extends boolean | null | undefined | RewardDefaultArgs> = $Result.GetResult<Prisma.$RewardPayload, S>

  type RewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RewardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RewardCountAggregateInputType | true
    }

  export interface RewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reward'], meta: { name: 'Reward' } }
    /**
     * Find zero or one Reward that matches the filter.
     * @param {RewardFindUniqueArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RewardFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RewardFindUniqueArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reward that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RewardFindUniqueOrThrowArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RewardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindFirstArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RewardFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardFindFirstArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindFirstOrThrowArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RewardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rewards
     * const rewards = await prisma.reward.findMany()
     * 
     * // Get first 10 Rewards
     * const rewards = await prisma.reward.findMany({ take: 10 })
     * 
     * // Only select the `telegramId`
     * const rewardWithTelegramIdOnly = await prisma.reward.findMany({ select: { telegramId: true } })
     * 
    **/
    findMany<T extends RewardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reward.
     * @param {RewardCreateArgs} args - Arguments to create a Reward.
     * @example
     * // Create one Reward
     * const Reward = await prisma.reward.create({
     *   data: {
     *     // ... data to create a Reward
     *   }
     * })
     * 
    **/
    create<T extends RewardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RewardCreateArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rewards.
     *     @param {RewardCreateManyArgs} args - Arguments to create many Rewards.
     *     @example
     *     // Create many Rewards
     *     const reward = await prisma.reward.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RewardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reward.
     * @param {RewardDeleteArgs} args - Arguments to delete one Reward.
     * @example
     * // Delete one Reward
     * const Reward = await prisma.reward.delete({
     *   where: {
     *     // ... filter to delete one Reward
     *   }
     * })
     * 
    **/
    delete<T extends RewardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RewardDeleteArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reward.
     * @param {RewardUpdateArgs} args - Arguments to update one Reward.
     * @example
     * // Update one Reward
     * const reward = await prisma.reward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RewardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RewardUpdateArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rewards.
     * @param {RewardDeleteManyArgs} args - Arguments to filter Rewards to delete.
     * @example
     * // Delete a few Rewards
     * const { count } = await prisma.reward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RewardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RewardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rewards
     * const reward = await prisma.reward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RewardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RewardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reward.
     * @param {RewardUpsertArgs} args - Arguments to update or create a Reward.
     * @example
     * // Update or create a Reward
     * const reward = await prisma.reward.upsert({
     *   create: {
     *     // ... data to create a Reward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reward we want to update
     *   }
     * })
    **/
    upsert<T extends RewardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RewardUpsertArgs<ExtArgs>>
    ): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardCountArgs} args - Arguments to filter Rewards to count.
     * @example
     * // Count the number of Rewards
     * const count = await prisma.reward.count({
     *   where: {
     *     // ... the filter for the Rewards we want to count
     *   }
     * })
    **/
    count<T extends RewardCountArgs>(
      args?: Subset<T, RewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RewardAggregateArgs>(args: Subset<T, RewardAggregateArgs>): Prisma.PrismaPromise<GetRewardAggregateType<T>>

    /**
     * Group by Reward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RewardGroupByArgs['orderBy'] }
        : { orderBy?: RewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reward model
   */
  readonly fields: RewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    referee<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    sale<T extends SaleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SaleDefaultArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reward model
   */ 
  interface RewardFieldRefs {
    readonly telegramId: FieldRef<"Reward", 'String'>
    readonly saleName: FieldRef<"Reward", 'String'>
    readonly refereeId: FieldRef<"Reward", 'String'>
    readonly referralLevel: FieldRef<"Reward", 'Int'>
    readonly amount: FieldRef<"Reward", 'Int'>
    readonly createdAt: FieldRef<"Reward", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reward findUnique
   */
  export type RewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward findUniqueOrThrow
   */
  export type RewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward findFirst
   */
  export type RewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rewards.
     */
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward findFirstOrThrow
   */
  export type RewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rewards.
     */
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward findMany
   */
  export type RewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Rewards to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward create
   */
  export type RewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The data needed to create a Reward.
     */
    data: XOR<RewardCreateInput, RewardUncheckedCreateInput>
  }

  /**
   * Reward createMany
   */
  export type RewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rewards.
     */
    data: RewardCreateManyInput | RewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reward update
   */
  export type RewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The data needed to update a Reward.
     */
    data: XOR<RewardUpdateInput, RewardUncheckedUpdateInput>
    /**
     * Choose, which Reward to update.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward updateMany
   */
  export type RewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rewards.
     */
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyInput>
    /**
     * Filter which Rewards to update
     */
    where?: RewardWhereInput
  }

  /**
   * Reward upsert
   */
  export type RewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The filter to search for the Reward to update in case it exists.
     */
    where: RewardWhereUniqueInput
    /**
     * In case the Reward found by the `where` argument doesn't exist, create a new Reward with this data.
     */
    create: XOR<RewardCreateInput, RewardUncheckedCreateInput>
    /**
     * In case the Reward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RewardUpdateInput, RewardUncheckedUpdateInput>
  }

  /**
   * Reward delete
   */
  export type RewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter which Reward to delete.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward deleteMany
   */
  export type RewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rewards to delete
     */
    where?: RewardWhereInput
  }

  /**
   * Reward without action
   */
  export type RewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    telegramId: 'telegramId',
    referrerId: 'referrerId',
    referralRewardLevelRates: 'referralRewardLevelRates',
    nonce: 'nonce',
    walletAddress: 'walletAddress',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    telegramId: 'telegramId',
    telegramUsername: 'telegramUsername',
    dateOfBirth: 'dateOfBirth',
    emailAddress: 'emailAddress',
    indicative: 'indicative',
    phoneNumber: 'phoneNumber',
    cityOfResidency: 'cityOfResidency',
    homeAddress: 'homeAddress',
    personalInterests: 'personalInterests',
    artisticInterests: 'artisticInterests',
    investmentInterests: 'investmentInterests',
    occupation: 'occupation',
    position: 'position',
    industry: 'industry',
    joiningReasons: 'joiningReasons',
    discoveryMethod: 'discoveryMethod',
    expectations: 'expectations',
    contribution: 'contribution',
    engagement: 'engagement',
    status: 'status'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const PaymentRequestScalarFieldEnum: {
    telegramId: 'telegramId',
    saleName: 'saleName',
    seqNo: 'seqNo',
    code: 'code',
    status: 'status',
    amount: 'amount',
    price: 'price',
    destination: 'destination',
    method: 'method',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expireAt: 'expireAt'
  };

  export type PaymentRequestScalarFieldEnum = (typeof PaymentRequestScalarFieldEnum)[keyof typeof PaymentRequestScalarFieldEnum]


  export const MerkleEntryScalarFieldEnum: {
    telegramId: 'telegramId',
    saleName: 'saleName',
    address: 'address',
    amount: 'amount'
  };

  export type MerkleEntryScalarFieldEnum = (typeof MerkleEntryScalarFieldEnum)[keyof typeof MerkleEntryScalarFieldEnum]


  export const SaleScalarFieldEnum: {
    name: 'name',
    status: 'status',
    isReceivingAddressEditable: 'isReceivingAddressEditable',
    phases: 'phases',
    tokensPerPhase: 'tokensPerPhase',
    initialPrice: 'initialPrice',
    priceIncrement: 'priceIncrement',
    start: 'start',
    end: 'end',
    pausedTime: 'pausedTime',
    pendingOrderAmount: 'pendingOrderAmount',
    totalSold: 'totalSold',
    totalRewards: 'totalRewards',
    createdAt: 'createdAt',
    pausedAt: 'pausedAt'
  };

  export type SaleScalarFieldEnum = (typeof SaleScalarFieldEnum)[keyof typeof SaleScalarFieldEnum]


  export const PurchaseScalarFieldEnum: {
    telegramId: 'telegramId',
    saleName: 'saleName',
    amount: 'amount',
    createdAt: 'createdAt'
  };

  export type PurchaseScalarFieldEnum = (typeof PurchaseScalarFieldEnum)[keyof typeof PurchaseScalarFieldEnum]


  export const RewardScalarFieldEnum: {
    telegramId: 'telegramId',
    saleName: 'saleName',
    refereeId: 'refereeId',
    referralLevel: 'referralLevel',
    amount: 'amount',
    createdAt: 'createdAt'
  };

  export type RewardScalarFieldEnum = (typeof RewardScalarFieldEnum)[keyof typeof RewardScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentRequestStatus'
   */
  export type EnumPaymentRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentRequestStatus'>
    


  /**
   * Reference to a field of type 'PaymentRequestStatus[]'
   */
  export type ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentRequestStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'SaleStatus'
   */
  export type EnumSaleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SaleStatus'>
    


  /**
   * Reference to a field of type 'SaleStatus[]'
   */
  export type ListEnumSaleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SaleStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    telegramId?: StringFilter<"User"> | string
    referrerId?: StringNullableFilter<"User"> | string | null
    referralRewardLevelRates?: FloatNullableListFilter<"User">
    nonce?: IntFilter<"User"> | number
    walletAddress?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    subscription?: XOR<SubscriptionNullableRelationFilter, SubscriptionWhereInput> | null
    purchases?: PurchaseListRelationFilter
    rewardsEarned?: RewardListRelationFilter
    rewardsGenerated?: RewardListRelationFilter
    referees?: UserListRelationFilter
    paymentRequests?: PaymentRequestListRelationFilter
    merkleEntries?: MerkleEntryListRelationFilter
    referrer?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    telegramId?: SortOrder
    referrerId?: SortOrderInput | SortOrder
    referralRewardLevelRates?: SortOrder
    nonce?: SortOrder
    walletAddress?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    subscription?: SubscriptionOrderByWithRelationInput
    purchases?: PurchaseOrderByRelationAggregateInput
    rewardsEarned?: RewardOrderByRelationAggregateInput
    rewardsGenerated?: RewardOrderByRelationAggregateInput
    referees?: UserOrderByRelationAggregateInput
    paymentRequests?: PaymentRequestOrderByRelationAggregateInput
    merkleEntries?: MerkleEntryOrderByRelationAggregateInput
    referrer?: UserOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    telegramId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    referrerId?: StringNullableFilter<"User"> | string | null
    referralRewardLevelRates?: FloatNullableListFilter<"User">
    nonce?: IntFilter<"User"> | number
    walletAddress?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    subscription?: XOR<SubscriptionNullableRelationFilter, SubscriptionWhereInput> | null
    purchases?: PurchaseListRelationFilter
    rewardsEarned?: RewardListRelationFilter
    rewardsGenerated?: RewardListRelationFilter
    referees?: UserListRelationFilter
    paymentRequests?: PaymentRequestListRelationFilter
    merkleEntries?: MerkleEntryListRelationFilter
    referrer?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "telegramId">

  export type UserOrderByWithAggregationInput = {
    telegramId?: SortOrder
    referrerId?: SortOrderInput | SortOrder
    referralRewardLevelRates?: SortOrder
    nonce?: SortOrder
    walletAddress?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    telegramId?: StringWithAggregatesFilter<"User"> | string
    referrerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    referralRewardLevelRates?: FloatNullableListFilter<"User">
    nonce?: IntWithAggregatesFilter<"User"> | number
    walletAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    telegramId?: StringFilter<"Subscription"> | string
    telegramUsername?: StringNullableFilter<"Subscription"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    emailAddress?: StringNullableFilter<"Subscription"> | string | null
    indicative?: StringNullableFilter<"Subscription"> | string | null
    phoneNumber?: StringNullableFilter<"Subscription"> | string | null
    cityOfResidency?: StringNullableFilter<"Subscription"> | string | null
    homeAddress?: StringNullableFilter<"Subscription"> | string | null
    personalInterests?: StringNullableFilter<"Subscription"> | string | null
    artisticInterests?: StringNullableFilter<"Subscription"> | string | null
    investmentInterests?: StringNullableFilter<"Subscription"> | string | null
    occupation?: StringNullableFilter<"Subscription"> | string | null
    position?: StringNullableFilter<"Subscription"> | string | null
    industry?: StringNullableFilter<"Subscription"> | string | null
    joiningReasons?: StringNullableFilter<"Subscription"> | string | null
    discoveryMethod?: StringNullableFilter<"Subscription"> | string | null
    expectations?: StringNullableFilter<"Subscription"> | string | null
    contribution?: StringNullableFilter<"Subscription"> | string | null
    engagement?: StringNullableFilter<"Subscription"> | string | null
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type SubscriptionOrderByWithRelationInput = {
    telegramId?: SortOrder
    telegramUsername?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    emailAddress?: SortOrderInput | SortOrder
    indicative?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    cityOfResidency?: SortOrderInput | SortOrder
    homeAddress?: SortOrderInput | SortOrder
    personalInterests?: SortOrderInput | SortOrder
    artisticInterests?: SortOrderInput | SortOrder
    investmentInterests?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    joiningReasons?: SortOrderInput | SortOrder
    discoveryMethod?: SortOrderInput | SortOrder
    expectations?: SortOrderInput | SortOrder
    contribution?: SortOrderInput | SortOrder
    engagement?: SortOrderInput | SortOrder
    status?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    telegramId?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    telegramUsername?: StringNullableFilter<"Subscription"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    emailAddress?: StringNullableFilter<"Subscription"> | string | null
    indicative?: StringNullableFilter<"Subscription"> | string | null
    phoneNumber?: StringNullableFilter<"Subscription"> | string | null
    cityOfResidency?: StringNullableFilter<"Subscription"> | string | null
    homeAddress?: StringNullableFilter<"Subscription"> | string | null
    personalInterests?: StringNullableFilter<"Subscription"> | string | null
    artisticInterests?: StringNullableFilter<"Subscription"> | string | null
    investmentInterests?: StringNullableFilter<"Subscription"> | string | null
    occupation?: StringNullableFilter<"Subscription"> | string | null
    position?: StringNullableFilter<"Subscription"> | string | null
    industry?: StringNullableFilter<"Subscription"> | string | null
    joiningReasons?: StringNullableFilter<"Subscription"> | string | null
    discoveryMethod?: StringNullableFilter<"Subscription"> | string | null
    expectations?: StringNullableFilter<"Subscription"> | string | null
    contribution?: StringNullableFilter<"Subscription"> | string | null
    engagement?: StringNullableFilter<"Subscription"> | string | null
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "telegramId">

  export type SubscriptionOrderByWithAggregationInput = {
    telegramId?: SortOrder
    telegramUsername?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    emailAddress?: SortOrderInput | SortOrder
    indicative?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    cityOfResidency?: SortOrderInput | SortOrder
    homeAddress?: SortOrderInput | SortOrder
    personalInterests?: SortOrderInput | SortOrder
    artisticInterests?: SortOrderInput | SortOrder
    investmentInterests?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    joiningReasons?: SortOrderInput | SortOrder
    discoveryMethod?: SortOrderInput | SortOrder
    expectations?: SortOrderInput | SortOrder
    contribution?: SortOrderInput | SortOrder
    engagement?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    telegramId?: StringWithAggregatesFilter<"Subscription"> | string
    telegramUsername?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    emailAddress?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    indicative?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    cityOfResidency?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    homeAddress?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    personalInterests?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    artisticInterests?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    investmentInterests?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    occupation?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    position?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    industry?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    joiningReasons?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    discoveryMethod?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    expectations?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    contribution?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    engagement?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    status?: EnumSubscriptionStatusWithAggregatesFilter<"Subscription"> | $Enums.SubscriptionStatus
  }

  export type PaymentRequestWhereInput = {
    AND?: PaymentRequestWhereInput | PaymentRequestWhereInput[]
    OR?: PaymentRequestWhereInput[]
    NOT?: PaymentRequestWhereInput | PaymentRequestWhereInput[]
    telegramId?: StringFilter<"PaymentRequest"> | string
    saleName?: StringFilter<"PaymentRequest"> | string
    seqNo?: IntFilter<"PaymentRequest"> | number
    code?: StringFilter<"PaymentRequest"> | string
    status?: EnumPaymentRequestStatusFilter<"PaymentRequest"> | $Enums.PaymentRequestStatus
    amount?: IntFilter<"PaymentRequest"> | number
    price?: FloatFilter<"PaymentRequest"> | number
    destination?: StringFilter<"PaymentRequest"> | string
    method?: EnumPaymentMethodFilter<"PaymentRequest"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"PaymentRequest"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentRequest"> | Date | string
    expireAt?: DateTimeFilter<"PaymentRequest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sale?: XOR<SaleRelationFilter, SaleWhereInput>
  }

  export type PaymentRequestOrderByWithRelationInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    seqNo?: SortOrder
    code?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    destination?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expireAt?: SortOrder
    user?: UserOrderByWithRelationInput
    sale?: SaleOrderByWithRelationInput
  }

  export type PaymentRequestWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    id?: PaymentRequestIdCompoundUniqueInput
    AND?: PaymentRequestWhereInput | PaymentRequestWhereInput[]
    OR?: PaymentRequestWhereInput[]
    NOT?: PaymentRequestWhereInput | PaymentRequestWhereInput[]
    telegramId?: StringFilter<"PaymentRequest"> | string
    saleName?: StringFilter<"PaymentRequest"> | string
    seqNo?: IntFilter<"PaymentRequest"> | number
    status?: EnumPaymentRequestStatusFilter<"PaymentRequest"> | $Enums.PaymentRequestStatus
    amount?: IntFilter<"PaymentRequest"> | number
    price?: FloatFilter<"PaymentRequest"> | number
    destination?: StringFilter<"PaymentRequest"> | string
    method?: EnumPaymentMethodFilter<"PaymentRequest"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"PaymentRequest"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentRequest"> | Date | string
    expireAt?: DateTimeFilter<"PaymentRequest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sale?: XOR<SaleRelationFilter, SaleWhereInput>
  }, "id" | "code">

  export type PaymentRequestOrderByWithAggregationInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    seqNo?: SortOrder
    code?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    destination?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expireAt?: SortOrder
    _count?: PaymentRequestCountOrderByAggregateInput
    _avg?: PaymentRequestAvgOrderByAggregateInput
    _max?: PaymentRequestMaxOrderByAggregateInput
    _min?: PaymentRequestMinOrderByAggregateInput
    _sum?: PaymentRequestSumOrderByAggregateInput
  }

  export type PaymentRequestScalarWhereWithAggregatesInput = {
    AND?: PaymentRequestScalarWhereWithAggregatesInput | PaymentRequestScalarWhereWithAggregatesInput[]
    OR?: PaymentRequestScalarWhereWithAggregatesInput[]
    NOT?: PaymentRequestScalarWhereWithAggregatesInput | PaymentRequestScalarWhereWithAggregatesInput[]
    telegramId?: StringWithAggregatesFilter<"PaymentRequest"> | string
    saleName?: StringWithAggregatesFilter<"PaymentRequest"> | string
    seqNo?: IntWithAggregatesFilter<"PaymentRequest"> | number
    code?: StringWithAggregatesFilter<"PaymentRequest"> | string
    status?: EnumPaymentRequestStatusWithAggregatesFilter<"PaymentRequest"> | $Enums.PaymentRequestStatus
    amount?: IntWithAggregatesFilter<"PaymentRequest"> | number
    price?: FloatWithAggregatesFilter<"PaymentRequest"> | number
    destination?: StringWithAggregatesFilter<"PaymentRequest"> | string
    method?: EnumPaymentMethodWithAggregatesFilter<"PaymentRequest"> | $Enums.PaymentMethod
    createdAt?: DateTimeWithAggregatesFilter<"PaymentRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentRequest"> | Date | string
    expireAt?: DateTimeWithAggregatesFilter<"PaymentRequest"> | Date | string
  }

  export type MerkleEntryWhereInput = {
    AND?: MerkleEntryWhereInput | MerkleEntryWhereInput[]
    OR?: MerkleEntryWhereInput[]
    NOT?: MerkleEntryWhereInput | MerkleEntryWhereInput[]
    telegramId?: StringFilter<"MerkleEntry"> | string
    saleName?: StringFilter<"MerkleEntry"> | string
    address?: StringNullableFilter<"MerkleEntry"> | string | null
    amount?: IntFilter<"MerkleEntry"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    sale?: XOR<SaleRelationFilter, SaleWhereInput>
  }

  export type MerkleEntryOrderByWithRelationInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    address?: SortOrderInput | SortOrder
    amount?: SortOrder
    user?: UserOrderByWithRelationInput
    sale?: SaleOrderByWithRelationInput
  }

  export type MerkleEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: MerkleEntryIdCompoundUniqueInput
    AND?: MerkleEntryWhereInput | MerkleEntryWhereInput[]
    OR?: MerkleEntryWhereInput[]
    NOT?: MerkleEntryWhereInput | MerkleEntryWhereInput[]
    telegramId?: StringFilter<"MerkleEntry"> | string
    saleName?: StringFilter<"MerkleEntry"> | string
    address?: StringNullableFilter<"MerkleEntry"> | string | null
    amount?: IntFilter<"MerkleEntry"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    sale?: XOR<SaleRelationFilter, SaleWhereInput>
  }, "id">

  export type MerkleEntryOrderByWithAggregationInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    address?: SortOrderInput | SortOrder
    amount?: SortOrder
    _count?: MerkleEntryCountOrderByAggregateInput
    _avg?: MerkleEntryAvgOrderByAggregateInput
    _max?: MerkleEntryMaxOrderByAggregateInput
    _min?: MerkleEntryMinOrderByAggregateInput
    _sum?: MerkleEntrySumOrderByAggregateInput
  }

  export type MerkleEntryScalarWhereWithAggregatesInput = {
    AND?: MerkleEntryScalarWhereWithAggregatesInput | MerkleEntryScalarWhereWithAggregatesInput[]
    OR?: MerkleEntryScalarWhereWithAggregatesInput[]
    NOT?: MerkleEntryScalarWhereWithAggregatesInput | MerkleEntryScalarWhereWithAggregatesInput[]
    telegramId?: StringWithAggregatesFilter<"MerkleEntry"> | string
    saleName?: StringWithAggregatesFilter<"MerkleEntry"> | string
    address?: StringNullableWithAggregatesFilter<"MerkleEntry"> | string | null
    amount?: IntWithAggregatesFilter<"MerkleEntry"> | number
  }

  export type SaleWhereInput = {
    AND?: SaleWhereInput | SaleWhereInput[]
    OR?: SaleWhereInput[]
    NOT?: SaleWhereInput | SaleWhereInput[]
    name?: StringFilter<"Sale"> | string
    status?: EnumSaleStatusFilter<"Sale"> | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFilter<"Sale"> | boolean
    phases?: IntFilter<"Sale"> | number
    tokensPerPhase?: IntNullableListFilter<"Sale">
    initialPrice?: DecimalFilter<"Sale"> | Decimal | DecimalJsLike | number | string
    priceIncrement?: DecimalNullableListFilter<"Sale">
    start?: DateTimeNullableFilter<"Sale"> | Date | string | null
    end?: DateTimeNullableFilter<"Sale"> | Date | string | null
    pausedTime?: IntFilter<"Sale"> | number
    pendingOrderAmount?: IntFilter<"Sale"> | number
    totalSold?: IntFilter<"Sale"> | number
    totalRewards?: IntFilter<"Sale"> | number
    createdAt?: DateTimeFilter<"Sale"> | Date | string
    pausedAt?: DateTimeNullableFilter<"Sale"> | Date | string | null
    purchases?: PurchaseListRelationFilter
    rewards?: RewardListRelationFilter
    paymentRequests?: PaymentRequestListRelationFilter
    merkleEntries?: MerkleEntryListRelationFilter
  }

  export type SaleOrderByWithRelationInput = {
    name?: SortOrder
    status?: SortOrder
    isReceivingAddressEditable?: SortOrder
    phases?: SortOrder
    tokensPerPhase?: SortOrder
    initialPrice?: SortOrder
    priceIncrement?: SortOrder
    start?: SortOrderInput | SortOrder
    end?: SortOrderInput | SortOrder
    pausedTime?: SortOrder
    pendingOrderAmount?: SortOrder
    totalSold?: SortOrder
    totalRewards?: SortOrder
    createdAt?: SortOrder
    pausedAt?: SortOrderInput | SortOrder
    purchases?: PurchaseOrderByRelationAggregateInput
    rewards?: RewardOrderByRelationAggregateInput
    paymentRequests?: PaymentRequestOrderByRelationAggregateInput
    merkleEntries?: MerkleEntryOrderByRelationAggregateInput
  }

  export type SaleWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: SaleWhereInput | SaleWhereInput[]
    OR?: SaleWhereInput[]
    NOT?: SaleWhereInput | SaleWhereInput[]
    status?: EnumSaleStatusFilter<"Sale"> | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFilter<"Sale"> | boolean
    phases?: IntFilter<"Sale"> | number
    tokensPerPhase?: IntNullableListFilter<"Sale">
    initialPrice?: DecimalFilter<"Sale"> | Decimal | DecimalJsLike | number | string
    priceIncrement?: DecimalNullableListFilter<"Sale">
    start?: DateTimeNullableFilter<"Sale"> | Date | string | null
    end?: DateTimeNullableFilter<"Sale"> | Date | string | null
    pausedTime?: IntFilter<"Sale"> | number
    pendingOrderAmount?: IntFilter<"Sale"> | number
    totalSold?: IntFilter<"Sale"> | number
    totalRewards?: IntFilter<"Sale"> | number
    createdAt?: DateTimeFilter<"Sale"> | Date | string
    pausedAt?: DateTimeNullableFilter<"Sale"> | Date | string | null
    purchases?: PurchaseListRelationFilter
    rewards?: RewardListRelationFilter
    paymentRequests?: PaymentRequestListRelationFilter
    merkleEntries?: MerkleEntryListRelationFilter
  }, "name">

  export type SaleOrderByWithAggregationInput = {
    name?: SortOrder
    status?: SortOrder
    isReceivingAddressEditable?: SortOrder
    phases?: SortOrder
    tokensPerPhase?: SortOrder
    initialPrice?: SortOrder
    priceIncrement?: SortOrder
    start?: SortOrderInput | SortOrder
    end?: SortOrderInput | SortOrder
    pausedTime?: SortOrder
    pendingOrderAmount?: SortOrder
    totalSold?: SortOrder
    totalRewards?: SortOrder
    createdAt?: SortOrder
    pausedAt?: SortOrderInput | SortOrder
    _count?: SaleCountOrderByAggregateInput
    _avg?: SaleAvgOrderByAggregateInput
    _max?: SaleMaxOrderByAggregateInput
    _min?: SaleMinOrderByAggregateInput
    _sum?: SaleSumOrderByAggregateInput
  }

  export type SaleScalarWhereWithAggregatesInput = {
    AND?: SaleScalarWhereWithAggregatesInput | SaleScalarWhereWithAggregatesInput[]
    OR?: SaleScalarWhereWithAggregatesInput[]
    NOT?: SaleScalarWhereWithAggregatesInput | SaleScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Sale"> | string
    status?: EnumSaleStatusWithAggregatesFilter<"Sale"> | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolWithAggregatesFilter<"Sale"> | boolean
    phases?: IntWithAggregatesFilter<"Sale"> | number
    tokensPerPhase?: IntNullableListFilter<"Sale">
    initialPrice?: DecimalWithAggregatesFilter<"Sale"> | Decimal | DecimalJsLike | number | string
    priceIncrement?: DecimalNullableListFilter<"Sale">
    start?: DateTimeNullableWithAggregatesFilter<"Sale"> | Date | string | null
    end?: DateTimeNullableWithAggregatesFilter<"Sale"> | Date | string | null
    pausedTime?: IntWithAggregatesFilter<"Sale"> | number
    pendingOrderAmount?: IntWithAggregatesFilter<"Sale"> | number
    totalSold?: IntWithAggregatesFilter<"Sale"> | number
    totalRewards?: IntWithAggregatesFilter<"Sale"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Sale"> | Date | string
    pausedAt?: DateTimeNullableWithAggregatesFilter<"Sale"> | Date | string | null
  }

  export type PurchaseWhereInput = {
    AND?: PurchaseWhereInput | PurchaseWhereInput[]
    OR?: PurchaseWhereInput[]
    NOT?: PurchaseWhereInput | PurchaseWhereInput[]
    telegramId?: StringFilter<"Purchase"> | string
    saleName?: StringFilter<"Purchase"> | string
    amount?: IntFilter<"Purchase"> | number
    createdAt?: DateTimeFilter<"Purchase"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sale?: XOR<SaleRelationFilter, SaleWhereInput>
  }

  export type PurchaseOrderByWithRelationInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    sale?: SaleOrderByWithRelationInput
  }

  export type PurchaseWhereUniqueInput = Prisma.AtLeast<{
    id?: PurchaseIdCompoundUniqueInput
    AND?: PurchaseWhereInput | PurchaseWhereInput[]
    OR?: PurchaseWhereInput[]
    NOT?: PurchaseWhereInput | PurchaseWhereInput[]
    telegramId?: StringFilter<"Purchase"> | string
    saleName?: StringFilter<"Purchase"> | string
    amount?: IntFilter<"Purchase"> | number
    createdAt?: DateTimeFilter<"Purchase"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    sale?: XOR<SaleRelationFilter, SaleWhereInput>
  }, "id">

  export type PurchaseOrderByWithAggregationInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    _count?: PurchaseCountOrderByAggregateInput
    _avg?: PurchaseAvgOrderByAggregateInput
    _max?: PurchaseMaxOrderByAggregateInput
    _min?: PurchaseMinOrderByAggregateInput
    _sum?: PurchaseSumOrderByAggregateInput
  }

  export type PurchaseScalarWhereWithAggregatesInput = {
    AND?: PurchaseScalarWhereWithAggregatesInput | PurchaseScalarWhereWithAggregatesInput[]
    OR?: PurchaseScalarWhereWithAggregatesInput[]
    NOT?: PurchaseScalarWhereWithAggregatesInput | PurchaseScalarWhereWithAggregatesInput[]
    telegramId?: StringWithAggregatesFilter<"Purchase"> | string
    saleName?: StringWithAggregatesFilter<"Purchase"> | string
    amount?: IntWithAggregatesFilter<"Purchase"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Purchase"> | Date | string
  }

  export type RewardWhereInput = {
    AND?: RewardWhereInput | RewardWhereInput[]
    OR?: RewardWhereInput[]
    NOT?: RewardWhereInput | RewardWhereInput[]
    telegramId?: StringFilter<"Reward"> | string
    saleName?: StringFilter<"Reward"> | string
    refereeId?: StringFilter<"Reward"> | string
    referralLevel?: IntFilter<"Reward"> | number
    amount?: IntFilter<"Reward"> | number
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    referee?: XOR<UserRelationFilter, UserWhereInput>
    sale?: XOR<SaleRelationFilter, SaleWhereInput>
  }

  export type RewardOrderByWithRelationInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    refereeId?: SortOrder
    referralLevel?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    referee?: UserOrderByWithRelationInput
    sale?: SaleOrderByWithRelationInput
  }

  export type RewardWhereUniqueInput = Prisma.AtLeast<{
    id?: RewardIdCompoundUniqueInput
    AND?: RewardWhereInput | RewardWhereInput[]
    OR?: RewardWhereInput[]
    NOT?: RewardWhereInput | RewardWhereInput[]
    telegramId?: StringFilter<"Reward"> | string
    saleName?: StringFilter<"Reward"> | string
    refereeId?: StringFilter<"Reward"> | string
    referralLevel?: IntFilter<"Reward"> | number
    amount?: IntFilter<"Reward"> | number
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    referee?: XOR<UserRelationFilter, UserWhereInput>
    sale?: XOR<SaleRelationFilter, SaleWhereInput>
  }, "id">

  export type RewardOrderByWithAggregationInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    refereeId?: SortOrder
    referralLevel?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    _count?: RewardCountOrderByAggregateInput
    _avg?: RewardAvgOrderByAggregateInput
    _max?: RewardMaxOrderByAggregateInput
    _min?: RewardMinOrderByAggregateInput
    _sum?: RewardSumOrderByAggregateInput
  }

  export type RewardScalarWhereWithAggregatesInput = {
    AND?: RewardScalarWhereWithAggregatesInput | RewardScalarWhereWithAggregatesInput[]
    OR?: RewardScalarWhereWithAggregatesInput[]
    NOT?: RewardScalarWhereWithAggregatesInput | RewardScalarWhereWithAggregatesInput[]
    telegramId?: StringWithAggregatesFilter<"Reward"> | string
    saleName?: StringWithAggregatesFilter<"Reward"> | string
    refereeId?: StringWithAggregatesFilter<"Reward"> | string
    referralLevel?: IntWithAggregatesFilter<"Reward"> | number
    amount?: IntWithAggregatesFilter<"Reward"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Reward"> | Date | string
  }

  export type UserCreateInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardCreateNestedManyWithoutRefereeInput
    referees?: UserCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutRefereesInput
  }

  export type UserUncheckedCreateInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardUncheckedCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardUncheckedCreateNestedManyWithoutRefereeInput
    referees?: UserUncheckedCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUpdateManyWithoutRefereeNestedInput
    referees?: UserUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutRefereesNestedInput
  }

  export type UserUncheckedUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUncheckedUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUncheckedUpdateManyWithoutRefereeNestedInput
    referees?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
  }

  export type UserUpdateManyMutationInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type UserUncheckedUpdateManyInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type SubscriptionCreateInput = {
    telegramUsername?: string | null
    dateOfBirth?: Date | string | null
    emailAddress?: string | null
    indicative?: string | null
    phoneNumber?: string | null
    cityOfResidency?: string | null
    homeAddress?: string | null
    personalInterests?: string | null
    artisticInterests?: string | null
    investmentInterests?: string | null
    occupation?: string | null
    position?: string | null
    industry?: string | null
    joiningReasons?: string | null
    discoveryMethod?: string | null
    expectations?: string | null
    contribution?: string | null
    engagement?: string | null
    status?: $Enums.SubscriptionStatus
    user?: UserCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    telegramId: string
    telegramUsername?: string | null
    dateOfBirth?: Date | string | null
    emailAddress?: string | null
    indicative?: string | null
    phoneNumber?: string | null
    cityOfResidency?: string | null
    homeAddress?: string | null
    personalInterests?: string | null
    artisticInterests?: string | null
    investmentInterests?: string | null
    occupation?: string | null
    position?: string | null
    industry?: string | null
    joiningReasons?: string | null
    discoveryMethod?: string | null
    expectations?: string | null
    contribution?: string | null
    engagement?: string | null
    status?: $Enums.SubscriptionStatus
  }

  export type SubscriptionUpdateInput = {
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    indicative?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    cityOfResidency?: NullableStringFieldUpdateOperationsInput | string | null
    homeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    personalInterests?: NullableStringFieldUpdateOperationsInput | string | null
    artisticInterests?: NullableStringFieldUpdateOperationsInput | string | null
    investmentInterests?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    joiningReasons?: NullableStringFieldUpdateOperationsInput | string | null
    discoveryMethod?: NullableStringFieldUpdateOperationsInput | string | null
    expectations?: NullableStringFieldUpdateOperationsInput | string | null
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    engagement?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    user?: UserUpdateOneWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    indicative?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    cityOfResidency?: NullableStringFieldUpdateOperationsInput | string | null
    homeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    personalInterests?: NullableStringFieldUpdateOperationsInput | string | null
    artisticInterests?: NullableStringFieldUpdateOperationsInput | string | null
    investmentInterests?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    joiningReasons?: NullableStringFieldUpdateOperationsInput | string | null
    discoveryMethod?: NullableStringFieldUpdateOperationsInput | string | null
    expectations?: NullableStringFieldUpdateOperationsInput | string | null
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    engagement?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  }

  export type SubscriptionCreateManyInput = {
    telegramId: string
    telegramUsername?: string | null
    dateOfBirth?: Date | string | null
    emailAddress?: string | null
    indicative?: string | null
    phoneNumber?: string | null
    cityOfResidency?: string | null
    homeAddress?: string | null
    personalInterests?: string | null
    artisticInterests?: string | null
    investmentInterests?: string | null
    occupation?: string | null
    position?: string | null
    industry?: string | null
    joiningReasons?: string | null
    discoveryMethod?: string | null
    expectations?: string | null
    contribution?: string | null
    engagement?: string | null
    status?: $Enums.SubscriptionStatus
  }

  export type SubscriptionUpdateManyMutationInput = {
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    indicative?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    cityOfResidency?: NullableStringFieldUpdateOperationsInput | string | null
    homeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    personalInterests?: NullableStringFieldUpdateOperationsInput | string | null
    artisticInterests?: NullableStringFieldUpdateOperationsInput | string | null
    investmentInterests?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    joiningReasons?: NullableStringFieldUpdateOperationsInput | string | null
    discoveryMethod?: NullableStringFieldUpdateOperationsInput | string | null
    expectations?: NullableStringFieldUpdateOperationsInput | string | null
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    engagement?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    indicative?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    cityOfResidency?: NullableStringFieldUpdateOperationsInput | string | null
    homeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    personalInterests?: NullableStringFieldUpdateOperationsInput | string | null
    artisticInterests?: NullableStringFieldUpdateOperationsInput | string | null
    investmentInterests?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    joiningReasons?: NullableStringFieldUpdateOperationsInput | string | null
    discoveryMethod?: NullableStringFieldUpdateOperationsInput | string | null
    expectations?: NullableStringFieldUpdateOperationsInput | string | null
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    engagement?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  }

  export type PaymentRequestCreateInput = {
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
    user: UserCreateNestedOneWithoutPaymentRequestsInput
    sale: SaleCreateNestedOneWithoutPaymentRequestsInput
  }

  export type PaymentRequestUncheckedCreateInput = {
    telegramId: string
    saleName: string
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
  }

  export type PaymentRequestUpdateInput = {
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPaymentRequestsNestedInput
    sale?: SaleUpdateOneRequiredWithoutPaymentRequestsNestedInput
  }

  export type PaymentRequestUncheckedUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentRequestCreateManyInput = {
    telegramId: string
    saleName: string
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
  }

  export type PaymentRequestUpdateManyMutationInput = {
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentRequestUncheckedUpdateManyInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleEntryCreateInput = {
    address?: string | null
    amount: number
    user: UserCreateNestedOneWithoutMerkleEntriesInput
    sale: SaleCreateNestedOneWithoutMerkleEntriesInput
  }

  export type MerkleEntryUncheckedCreateInput = {
    telegramId: string
    saleName: string
    address?: string | null
    amount: number
  }

  export type MerkleEntryUpdateInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutMerkleEntriesNestedInput
    sale?: SaleUpdateOneRequiredWithoutMerkleEntriesNestedInput
  }

  export type MerkleEntryUncheckedUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type MerkleEntryCreateManyInput = {
    telegramId: string
    saleName: string
    address?: string | null
    amount: number
  }

  export type MerkleEntryUpdateManyMutationInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type MerkleEntryUncheckedUpdateManyInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type SaleCreateInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    purchases?: PurchaseCreateNestedManyWithoutSaleInput
    rewards?: RewardCreateNestedManyWithoutSaleInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutSaleInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    purchases?: PurchaseUncheckedCreateNestedManyWithoutSaleInput
    rewards?: RewardUncheckedCreateNestedManyWithoutSaleInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutSaleInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchases?: PurchaseUpdateManyWithoutSaleNestedInput
    rewards?: RewardUpdateManyWithoutSaleNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutSaleNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchases?: PurchaseUncheckedUpdateManyWithoutSaleNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutSaleNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutSaleNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type SaleCreateManyInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
  }

  export type SaleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SaleUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PurchaseCreateInput = {
    amount: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPurchasesInput
    sale: SaleCreateNestedOneWithoutPurchasesInput
  }

  export type PurchaseUncheckedCreateInput = {
    telegramId: string
    saleName: string
    amount: number
    createdAt?: Date | string
  }

  export type PurchaseUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPurchasesNestedInput
    sale?: SaleUpdateOneRequiredWithoutPurchasesNestedInput
  }

  export type PurchaseUncheckedUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseCreateManyInput = {
    telegramId: string
    saleName: string
    amount: number
    createdAt?: Date | string
  }

  export type PurchaseUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseUncheckedUpdateManyInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardCreateInput = {
    referralLevel: number
    amount: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRewardsEarnedInput
    referee: UserCreateNestedOneWithoutRewardsGeneratedInput
    sale: SaleCreateNestedOneWithoutRewardsInput
  }

  export type RewardUncheckedCreateInput = {
    telegramId: string
    saleName: string
    refereeId: string
    referralLevel: number
    amount: number
    createdAt?: Date | string
  }

  export type RewardUpdateInput = {
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRewardsEarnedNestedInput
    referee?: UserUpdateOneRequiredWithoutRewardsGeneratedNestedInput
    sale?: SaleUpdateOneRequiredWithoutRewardsNestedInput
  }

  export type RewardUncheckedUpdateInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardCreateManyInput = {
    telegramId: string
    saleName: string
    refereeId: string
    referralLevel: number
    amount: number
    createdAt?: Date | string
  }

  export type RewardUpdateManyMutationInput = {
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    has?: number | FloatFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListFloatFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListFloatFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type SubscriptionNullableRelationFilter = {
    is?: SubscriptionWhereInput | null
    isNot?: SubscriptionWhereInput | null
  }

  export type PurchaseListRelationFilter = {
    every?: PurchaseWhereInput
    some?: PurchaseWhereInput
    none?: PurchaseWhereInput
  }

  export type RewardListRelationFilter = {
    every?: RewardWhereInput
    some?: RewardWhereInput
    none?: RewardWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type PaymentRequestListRelationFilter = {
    every?: PaymentRequestWhereInput
    some?: PaymentRequestWhereInput
    none?: PaymentRequestWhereInput
  }

  export type MerkleEntryListRelationFilter = {
    every?: MerkleEntryWhereInput
    some?: MerkleEntryWhereInput
    none?: MerkleEntryWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PurchaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MerkleEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    telegramId?: SortOrder
    referrerId?: SortOrder
    referralRewardLevelRates?: SortOrder
    nonce?: SortOrder
    walletAddress?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    referralRewardLevelRates?: SortOrder
    nonce?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    telegramId?: SortOrder
    referrerId?: SortOrder
    nonce?: SortOrder
    walletAddress?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    telegramId?: SortOrder
    referrerId?: SortOrder
    nonce?: SortOrder
    walletAddress?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    referralRewardLevelRates?: SortOrder
    nonce?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type SubscriptionCountOrderByAggregateInput = {
    telegramId?: SortOrder
    telegramUsername?: SortOrder
    dateOfBirth?: SortOrder
    emailAddress?: SortOrder
    indicative?: SortOrder
    phoneNumber?: SortOrder
    cityOfResidency?: SortOrder
    homeAddress?: SortOrder
    personalInterests?: SortOrder
    artisticInterests?: SortOrder
    investmentInterests?: SortOrder
    occupation?: SortOrder
    position?: SortOrder
    industry?: SortOrder
    joiningReasons?: SortOrder
    discoveryMethod?: SortOrder
    expectations?: SortOrder
    contribution?: SortOrder
    engagement?: SortOrder
    status?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    telegramId?: SortOrder
    telegramUsername?: SortOrder
    dateOfBirth?: SortOrder
    emailAddress?: SortOrder
    indicative?: SortOrder
    phoneNumber?: SortOrder
    cityOfResidency?: SortOrder
    homeAddress?: SortOrder
    personalInterests?: SortOrder
    artisticInterests?: SortOrder
    investmentInterests?: SortOrder
    occupation?: SortOrder
    position?: SortOrder
    industry?: SortOrder
    joiningReasons?: SortOrder
    discoveryMethod?: SortOrder
    expectations?: SortOrder
    contribution?: SortOrder
    engagement?: SortOrder
    status?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    telegramId?: SortOrder
    telegramUsername?: SortOrder
    dateOfBirth?: SortOrder
    emailAddress?: SortOrder
    indicative?: SortOrder
    phoneNumber?: SortOrder
    cityOfResidency?: SortOrder
    homeAddress?: SortOrder
    personalInterests?: SortOrder
    artisticInterests?: SortOrder
    investmentInterests?: SortOrder
    occupation?: SortOrder
    position?: SortOrder
    industry?: SortOrder
    joiningReasons?: SortOrder
    discoveryMethod?: SortOrder
    expectations?: SortOrder
    contribution?: SortOrder
    engagement?: SortOrder
    status?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type EnumPaymentRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentRequestStatus | EnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentRequestStatus[] | ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentRequestStatus[] | ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentRequestStatusFilter<$PrismaModel> | $Enums.PaymentRequestStatus
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SaleRelationFilter = {
    is?: SaleWhereInput
    isNot?: SaleWhereInput
  }

  export type PaymentRequestIdCompoundUniqueInput = {
    telegramId: string
    saleName: string
    seqNo: number
  }

  export type PaymentRequestCountOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    seqNo?: SortOrder
    code?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    destination?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expireAt?: SortOrder
  }

  export type PaymentRequestAvgOrderByAggregateInput = {
    seqNo?: SortOrder
    amount?: SortOrder
    price?: SortOrder
  }

  export type PaymentRequestMaxOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    seqNo?: SortOrder
    code?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    destination?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expireAt?: SortOrder
  }

  export type PaymentRequestMinOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    seqNo?: SortOrder
    code?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    destination?: SortOrder
    method?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expireAt?: SortOrder
  }

  export type PaymentRequestSumOrderByAggregateInput = {
    seqNo?: SortOrder
    amount?: SortOrder
    price?: SortOrder
  }

  export type EnumPaymentRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentRequestStatus | EnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentRequestStatus[] | ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentRequestStatus[] | ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentRequestStatusFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MerkleEntryIdCompoundUniqueInput = {
    telegramId: string
    saleName: string
  }

  export type MerkleEntryCountOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    address?: SortOrder
    amount?: SortOrder
  }

  export type MerkleEntryAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type MerkleEntryMaxOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    address?: SortOrder
    amount?: SortOrder
  }

  export type MerkleEntryMinOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    address?: SortOrder
    amount?: SortOrder
  }

  export type MerkleEntrySumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumSaleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SaleStatus | EnumSaleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SaleStatus[] | ListEnumSaleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SaleStatus[] | ListEnumSaleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSaleStatusFilter<$PrismaModel> | $Enums.SaleStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DecimalNullableListFilter<$PrismaModel = never> = {
    equals?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    has?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    hasEvery?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    hasSome?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type SaleCountOrderByAggregateInput = {
    name?: SortOrder
    status?: SortOrder
    isReceivingAddressEditable?: SortOrder
    phases?: SortOrder
    tokensPerPhase?: SortOrder
    initialPrice?: SortOrder
    priceIncrement?: SortOrder
    start?: SortOrder
    end?: SortOrder
    pausedTime?: SortOrder
    pendingOrderAmount?: SortOrder
    totalSold?: SortOrder
    totalRewards?: SortOrder
    createdAt?: SortOrder
    pausedAt?: SortOrder
  }

  export type SaleAvgOrderByAggregateInput = {
    phases?: SortOrder
    tokensPerPhase?: SortOrder
    initialPrice?: SortOrder
    priceIncrement?: SortOrder
    pausedTime?: SortOrder
    pendingOrderAmount?: SortOrder
    totalSold?: SortOrder
    totalRewards?: SortOrder
  }

  export type SaleMaxOrderByAggregateInput = {
    name?: SortOrder
    status?: SortOrder
    isReceivingAddressEditable?: SortOrder
    phases?: SortOrder
    initialPrice?: SortOrder
    start?: SortOrder
    end?: SortOrder
    pausedTime?: SortOrder
    pendingOrderAmount?: SortOrder
    totalSold?: SortOrder
    totalRewards?: SortOrder
    createdAt?: SortOrder
    pausedAt?: SortOrder
  }

  export type SaleMinOrderByAggregateInput = {
    name?: SortOrder
    status?: SortOrder
    isReceivingAddressEditable?: SortOrder
    phases?: SortOrder
    initialPrice?: SortOrder
    start?: SortOrder
    end?: SortOrder
    pausedTime?: SortOrder
    pendingOrderAmount?: SortOrder
    totalSold?: SortOrder
    totalRewards?: SortOrder
    createdAt?: SortOrder
    pausedAt?: SortOrder
  }

  export type SaleSumOrderByAggregateInput = {
    phases?: SortOrder
    tokensPerPhase?: SortOrder
    initialPrice?: SortOrder
    priceIncrement?: SortOrder
    pausedTime?: SortOrder
    pendingOrderAmount?: SortOrder
    totalSold?: SortOrder
    totalRewards?: SortOrder
  }

  export type EnumSaleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SaleStatus | EnumSaleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SaleStatus[] | ListEnumSaleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SaleStatus[] | ListEnumSaleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSaleStatusWithAggregatesFilter<$PrismaModel> | $Enums.SaleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSaleStatusFilter<$PrismaModel>
    _max?: NestedEnumSaleStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type PurchaseIdCompoundUniqueInput = {
    telegramId: string
    saleName: string
    createdAt: Date | string
  }

  export type PurchaseCountOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PurchaseMaxOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseMinOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type RewardIdCompoundUniqueInput = {
    telegramId: string
    saleName: string
    refereeId: string
    createdAt: Date | string
  }

  export type RewardCountOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    refereeId?: SortOrder
    referralLevel?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type RewardAvgOrderByAggregateInput = {
    referralLevel?: SortOrder
    amount?: SortOrder
  }

  export type RewardMaxOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    refereeId?: SortOrder
    referralLevel?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type RewardMinOrderByAggregateInput = {
    telegramId?: SortOrder
    saleName?: SortOrder
    refereeId?: SortOrder
    referralLevel?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
  }

  export type RewardSumOrderByAggregateInput = {
    referralLevel?: SortOrder
    amount?: SortOrder
  }

  export type UserCreatereferralRewardLevelRatesInput = {
    set: number[]
  }

  export type SubscriptionCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type PurchaseCreateNestedManyWithoutUserInput = {
    create?: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput> | PurchaseCreateWithoutUserInput[] | PurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutUserInput | PurchaseCreateOrConnectWithoutUserInput[]
    createMany?: PurchaseCreateManyUserInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type RewardCreateNestedManyWithoutUserInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type RewardCreateNestedManyWithoutRefereeInput = {
    create?: XOR<RewardCreateWithoutRefereeInput, RewardUncheckedCreateWithoutRefereeInput> | RewardCreateWithoutRefereeInput[] | RewardUncheckedCreateWithoutRefereeInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutRefereeInput | RewardCreateOrConnectWithoutRefereeInput[]
    createMany?: RewardCreateManyRefereeInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutReferrerInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PaymentRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentRequestCreateWithoutUserInput, PaymentRequestUncheckedCreateWithoutUserInput> | PaymentRequestCreateWithoutUserInput[] | PaymentRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentRequestCreateOrConnectWithoutUserInput | PaymentRequestCreateOrConnectWithoutUserInput[]
    createMany?: PaymentRequestCreateManyUserInputEnvelope
    connect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
  }

  export type MerkleEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<MerkleEntryCreateWithoutUserInput, MerkleEntryUncheckedCreateWithoutUserInput> | MerkleEntryCreateWithoutUserInput[] | MerkleEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MerkleEntryCreateOrConnectWithoutUserInput | MerkleEntryCreateOrConnectWithoutUserInput[]
    createMany?: MerkleEntryCreateManyUserInputEnvelope
    connect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutRefereesInput = {
    create?: XOR<UserCreateWithoutRefereesInput, UserUncheckedCreateWithoutRefereesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefereesInput
    connect?: UserWhereUniqueInput
  }

  export type SubscriptionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type PurchaseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput> | PurchaseCreateWithoutUserInput[] | PurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutUserInput | PurchaseCreateOrConnectWithoutUserInput[]
    createMany?: PurchaseCreateManyUserInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type RewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type RewardUncheckedCreateNestedManyWithoutRefereeInput = {
    create?: XOR<RewardCreateWithoutRefereeInput, RewardUncheckedCreateWithoutRefereeInput> | RewardCreateWithoutRefereeInput[] | RewardUncheckedCreateWithoutRefereeInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutRefereeInput | RewardCreateOrConnectWithoutRefereeInput[]
    createMany?: RewardCreateManyRefereeInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReferrerInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PaymentRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentRequestCreateWithoutUserInput, PaymentRequestUncheckedCreateWithoutUserInput> | PaymentRequestCreateWithoutUserInput[] | PaymentRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentRequestCreateOrConnectWithoutUserInput | PaymentRequestCreateOrConnectWithoutUserInput[]
    createMany?: PaymentRequestCreateManyUserInputEnvelope
    connect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
  }

  export type MerkleEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MerkleEntryCreateWithoutUserInput, MerkleEntryUncheckedCreateWithoutUserInput> | MerkleEntryCreateWithoutUserInput[] | MerkleEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MerkleEntryCreateOrConnectWithoutUserInput | MerkleEntryCreateOrConnectWithoutUserInput[]
    createMany?: MerkleEntryCreateManyUserInputEnvelope
    connect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdatereferralRewardLevelRatesInput = {
    set?: number[]
    push?: number | number[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type SubscriptionUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseUpdateManyWithoutUserNestedInput = {
    create?: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput> | PurchaseCreateWithoutUserInput[] | PurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutUserInput | PurchaseCreateOrConnectWithoutUserInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutUserInput | PurchaseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PurchaseCreateManyUserInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutUserInput | PurchaseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutUserInput | PurchaseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type RewardUpdateManyWithoutUserNestedInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutUserInput | RewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutUserInput | RewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutUserInput | RewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type RewardUpdateManyWithoutRefereeNestedInput = {
    create?: XOR<RewardCreateWithoutRefereeInput, RewardUncheckedCreateWithoutRefereeInput> | RewardCreateWithoutRefereeInput[] | RewardUncheckedCreateWithoutRefereeInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutRefereeInput | RewardCreateOrConnectWithoutRefereeInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutRefereeInput | RewardUpsertWithWhereUniqueWithoutRefereeInput[]
    createMany?: RewardCreateManyRefereeInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutRefereeInput | RewardUpdateWithWhereUniqueWithoutRefereeInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutRefereeInput | RewardUpdateManyWithWhereWithoutRefereeInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type UserUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferrerInput | UserUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferrerInput | UserUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferrerInput | UserUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PaymentRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentRequestCreateWithoutUserInput, PaymentRequestUncheckedCreateWithoutUserInput> | PaymentRequestCreateWithoutUserInput[] | PaymentRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentRequestCreateOrConnectWithoutUserInput | PaymentRequestCreateOrConnectWithoutUserInput[]
    upsert?: PaymentRequestUpsertWithWhereUniqueWithoutUserInput | PaymentRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentRequestCreateManyUserInputEnvelope
    set?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    disconnect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    delete?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    connect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    update?: PaymentRequestUpdateWithWhereUniqueWithoutUserInput | PaymentRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentRequestUpdateManyWithWhereWithoutUserInput | PaymentRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentRequestScalarWhereInput | PaymentRequestScalarWhereInput[]
  }

  export type MerkleEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<MerkleEntryCreateWithoutUserInput, MerkleEntryUncheckedCreateWithoutUserInput> | MerkleEntryCreateWithoutUserInput[] | MerkleEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MerkleEntryCreateOrConnectWithoutUserInput | MerkleEntryCreateOrConnectWithoutUserInput[]
    upsert?: MerkleEntryUpsertWithWhereUniqueWithoutUserInput | MerkleEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MerkleEntryCreateManyUserInputEnvelope
    set?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    disconnect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    delete?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    connect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    update?: MerkleEntryUpdateWithWhereUniqueWithoutUserInput | MerkleEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MerkleEntryUpdateManyWithWhereWithoutUserInput | MerkleEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MerkleEntryScalarWhereInput | MerkleEntryScalarWhereInput[]
  }

  export type UserUpdateOneWithoutRefereesNestedInput = {
    create?: XOR<UserCreateWithoutRefereesInput, UserUncheckedCreateWithoutRefereesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefereesInput
    upsert?: UserUpsertWithoutRefereesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefereesInput, UserUpdateWithoutRefereesInput>, UserUncheckedUpdateWithoutRefereesInput>
  }

  export type SubscriptionUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput> | PurchaseCreateWithoutUserInput[] | PurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutUserInput | PurchaseCreateOrConnectWithoutUserInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutUserInput | PurchaseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PurchaseCreateManyUserInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutUserInput | PurchaseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutUserInput | PurchaseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type RewardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutUserInput | RewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutUserInput | RewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutUserInput | RewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type RewardUncheckedUpdateManyWithoutRefereeNestedInput = {
    create?: XOR<RewardCreateWithoutRefereeInput, RewardUncheckedCreateWithoutRefereeInput> | RewardCreateWithoutRefereeInput[] | RewardUncheckedCreateWithoutRefereeInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutRefereeInput | RewardCreateOrConnectWithoutRefereeInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutRefereeInput | RewardUpsertWithWhereUniqueWithoutRefereeInput[]
    createMany?: RewardCreateManyRefereeInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutRefereeInput | RewardUpdateWithWhereUniqueWithoutRefereeInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutRefereeInput | RewardUpdateManyWithWhereWithoutRefereeInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferrerInput | UserUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferrerInput | UserUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferrerInput | UserUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PaymentRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentRequestCreateWithoutUserInput, PaymentRequestUncheckedCreateWithoutUserInput> | PaymentRequestCreateWithoutUserInput[] | PaymentRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentRequestCreateOrConnectWithoutUserInput | PaymentRequestCreateOrConnectWithoutUserInput[]
    upsert?: PaymentRequestUpsertWithWhereUniqueWithoutUserInput | PaymentRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentRequestCreateManyUserInputEnvelope
    set?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    disconnect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    delete?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    connect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    update?: PaymentRequestUpdateWithWhereUniqueWithoutUserInput | PaymentRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentRequestUpdateManyWithWhereWithoutUserInput | PaymentRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentRequestScalarWhereInput | PaymentRequestScalarWhereInput[]
  }

  export type MerkleEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MerkleEntryCreateWithoutUserInput, MerkleEntryUncheckedCreateWithoutUserInput> | MerkleEntryCreateWithoutUserInput[] | MerkleEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MerkleEntryCreateOrConnectWithoutUserInput | MerkleEntryCreateOrConnectWithoutUserInput[]
    upsert?: MerkleEntryUpsertWithWhereUniqueWithoutUserInput | MerkleEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MerkleEntryCreateManyUserInputEnvelope
    set?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    disconnect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    delete?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    connect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    update?: MerkleEntryUpdateWithWhereUniqueWithoutUserInput | MerkleEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MerkleEntryUpdateManyWithWhereWithoutUserInput | MerkleEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MerkleEntryScalarWhereInput | MerkleEntryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type UserUpdateOneWithoutSubscriptionNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    upsert?: UserUpsertWithoutSubscriptionInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionInput, UserUpdateWithoutSubscriptionInput>, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserCreateNestedOneWithoutPaymentRequestsInput = {
    create?: XOR<UserCreateWithoutPaymentRequestsInput, UserUncheckedCreateWithoutPaymentRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type SaleCreateNestedOneWithoutPaymentRequestsInput = {
    create?: XOR<SaleCreateWithoutPaymentRequestsInput, SaleUncheckedCreateWithoutPaymentRequestsInput>
    connectOrCreate?: SaleCreateOrConnectWithoutPaymentRequestsInput
    connect?: SaleWhereUniqueInput
  }

  export type EnumPaymentRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentRequestStatus
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutPaymentRequestsNestedInput = {
    create?: XOR<UserCreateWithoutPaymentRequestsInput, UserUncheckedCreateWithoutPaymentRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentRequestsInput
    upsert?: UserUpsertWithoutPaymentRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentRequestsInput, UserUpdateWithoutPaymentRequestsInput>, UserUncheckedUpdateWithoutPaymentRequestsInput>
  }

  export type SaleUpdateOneRequiredWithoutPaymentRequestsNestedInput = {
    create?: XOR<SaleCreateWithoutPaymentRequestsInput, SaleUncheckedCreateWithoutPaymentRequestsInput>
    connectOrCreate?: SaleCreateOrConnectWithoutPaymentRequestsInput
    upsert?: SaleUpsertWithoutPaymentRequestsInput
    connect?: SaleWhereUniqueInput
    update?: XOR<XOR<SaleUpdateToOneWithWhereWithoutPaymentRequestsInput, SaleUpdateWithoutPaymentRequestsInput>, SaleUncheckedUpdateWithoutPaymentRequestsInput>
  }

  export type UserCreateNestedOneWithoutMerkleEntriesInput = {
    create?: XOR<UserCreateWithoutMerkleEntriesInput, UserUncheckedCreateWithoutMerkleEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMerkleEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type SaleCreateNestedOneWithoutMerkleEntriesInput = {
    create?: XOR<SaleCreateWithoutMerkleEntriesInput, SaleUncheckedCreateWithoutMerkleEntriesInput>
    connectOrCreate?: SaleCreateOrConnectWithoutMerkleEntriesInput
    connect?: SaleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMerkleEntriesNestedInput = {
    create?: XOR<UserCreateWithoutMerkleEntriesInput, UserUncheckedCreateWithoutMerkleEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMerkleEntriesInput
    upsert?: UserUpsertWithoutMerkleEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMerkleEntriesInput, UserUpdateWithoutMerkleEntriesInput>, UserUncheckedUpdateWithoutMerkleEntriesInput>
  }

  export type SaleUpdateOneRequiredWithoutMerkleEntriesNestedInput = {
    create?: XOR<SaleCreateWithoutMerkleEntriesInput, SaleUncheckedCreateWithoutMerkleEntriesInput>
    connectOrCreate?: SaleCreateOrConnectWithoutMerkleEntriesInput
    upsert?: SaleUpsertWithoutMerkleEntriesInput
    connect?: SaleWhereUniqueInput
    update?: XOR<XOR<SaleUpdateToOneWithWhereWithoutMerkleEntriesInput, SaleUpdateWithoutMerkleEntriesInput>, SaleUncheckedUpdateWithoutMerkleEntriesInput>
  }

  export type SaleCreatetokensPerPhaseInput = {
    set: number[]
  }

  export type SaleCreatepriceIncrementInput = {
    set: Decimal[] | DecimalJsLike[] | number[] | string[]
  }

  export type PurchaseCreateNestedManyWithoutSaleInput = {
    create?: XOR<PurchaseCreateWithoutSaleInput, PurchaseUncheckedCreateWithoutSaleInput> | PurchaseCreateWithoutSaleInput[] | PurchaseUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutSaleInput | PurchaseCreateOrConnectWithoutSaleInput[]
    createMany?: PurchaseCreateManySaleInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type RewardCreateNestedManyWithoutSaleInput = {
    create?: XOR<RewardCreateWithoutSaleInput, RewardUncheckedCreateWithoutSaleInput> | RewardCreateWithoutSaleInput[] | RewardUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutSaleInput | RewardCreateOrConnectWithoutSaleInput[]
    createMany?: RewardCreateManySaleInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type PaymentRequestCreateNestedManyWithoutSaleInput = {
    create?: XOR<PaymentRequestCreateWithoutSaleInput, PaymentRequestUncheckedCreateWithoutSaleInput> | PaymentRequestCreateWithoutSaleInput[] | PaymentRequestUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PaymentRequestCreateOrConnectWithoutSaleInput | PaymentRequestCreateOrConnectWithoutSaleInput[]
    createMany?: PaymentRequestCreateManySaleInputEnvelope
    connect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
  }

  export type MerkleEntryCreateNestedManyWithoutSaleInput = {
    create?: XOR<MerkleEntryCreateWithoutSaleInput, MerkleEntryUncheckedCreateWithoutSaleInput> | MerkleEntryCreateWithoutSaleInput[] | MerkleEntryUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: MerkleEntryCreateOrConnectWithoutSaleInput | MerkleEntryCreateOrConnectWithoutSaleInput[]
    createMany?: MerkleEntryCreateManySaleInputEnvelope
    connect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
  }

  export type PurchaseUncheckedCreateNestedManyWithoutSaleInput = {
    create?: XOR<PurchaseCreateWithoutSaleInput, PurchaseUncheckedCreateWithoutSaleInput> | PurchaseCreateWithoutSaleInput[] | PurchaseUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutSaleInput | PurchaseCreateOrConnectWithoutSaleInput[]
    createMany?: PurchaseCreateManySaleInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type RewardUncheckedCreateNestedManyWithoutSaleInput = {
    create?: XOR<RewardCreateWithoutSaleInput, RewardUncheckedCreateWithoutSaleInput> | RewardCreateWithoutSaleInput[] | RewardUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutSaleInput | RewardCreateOrConnectWithoutSaleInput[]
    createMany?: RewardCreateManySaleInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type PaymentRequestUncheckedCreateNestedManyWithoutSaleInput = {
    create?: XOR<PaymentRequestCreateWithoutSaleInput, PaymentRequestUncheckedCreateWithoutSaleInput> | PaymentRequestCreateWithoutSaleInput[] | PaymentRequestUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PaymentRequestCreateOrConnectWithoutSaleInput | PaymentRequestCreateOrConnectWithoutSaleInput[]
    createMany?: PaymentRequestCreateManySaleInputEnvelope
    connect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
  }

  export type MerkleEntryUncheckedCreateNestedManyWithoutSaleInput = {
    create?: XOR<MerkleEntryCreateWithoutSaleInput, MerkleEntryUncheckedCreateWithoutSaleInput> | MerkleEntryCreateWithoutSaleInput[] | MerkleEntryUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: MerkleEntryCreateOrConnectWithoutSaleInput | MerkleEntryCreateOrConnectWithoutSaleInput[]
    createMany?: MerkleEntryCreateManySaleInputEnvelope
    connect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
  }

  export type EnumSaleStatusFieldUpdateOperationsInput = {
    set?: $Enums.SaleStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type SaleUpdatetokensPerPhaseInput = {
    set?: number[]
    push?: number | number[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type SaleUpdatepriceIncrementInput = {
    set?: Decimal[] | DecimalJsLike[] | number[] | string[]
    push?: Decimal | DecimalJsLike | number | string | Decimal[] | DecimalJsLike[] | number[] | string[]
  }

  export type PurchaseUpdateManyWithoutSaleNestedInput = {
    create?: XOR<PurchaseCreateWithoutSaleInput, PurchaseUncheckedCreateWithoutSaleInput> | PurchaseCreateWithoutSaleInput[] | PurchaseUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutSaleInput | PurchaseCreateOrConnectWithoutSaleInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutSaleInput | PurchaseUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: PurchaseCreateManySaleInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutSaleInput | PurchaseUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutSaleInput | PurchaseUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type RewardUpdateManyWithoutSaleNestedInput = {
    create?: XOR<RewardCreateWithoutSaleInput, RewardUncheckedCreateWithoutSaleInput> | RewardCreateWithoutSaleInput[] | RewardUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutSaleInput | RewardCreateOrConnectWithoutSaleInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutSaleInput | RewardUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: RewardCreateManySaleInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutSaleInput | RewardUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutSaleInput | RewardUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type PaymentRequestUpdateManyWithoutSaleNestedInput = {
    create?: XOR<PaymentRequestCreateWithoutSaleInput, PaymentRequestUncheckedCreateWithoutSaleInput> | PaymentRequestCreateWithoutSaleInput[] | PaymentRequestUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PaymentRequestCreateOrConnectWithoutSaleInput | PaymentRequestCreateOrConnectWithoutSaleInput[]
    upsert?: PaymentRequestUpsertWithWhereUniqueWithoutSaleInput | PaymentRequestUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: PaymentRequestCreateManySaleInputEnvelope
    set?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    disconnect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    delete?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    connect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    update?: PaymentRequestUpdateWithWhereUniqueWithoutSaleInput | PaymentRequestUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: PaymentRequestUpdateManyWithWhereWithoutSaleInput | PaymentRequestUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: PaymentRequestScalarWhereInput | PaymentRequestScalarWhereInput[]
  }

  export type MerkleEntryUpdateManyWithoutSaleNestedInput = {
    create?: XOR<MerkleEntryCreateWithoutSaleInput, MerkleEntryUncheckedCreateWithoutSaleInput> | MerkleEntryCreateWithoutSaleInput[] | MerkleEntryUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: MerkleEntryCreateOrConnectWithoutSaleInput | MerkleEntryCreateOrConnectWithoutSaleInput[]
    upsert?: MerkleEntryUpsertWithWhereUniqueWithoutSaleInput | MerkleEntryUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: MerkleEntryCreateManySaleInputEnvelope
    set?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    disconnect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    delete?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    connect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    update?: MerkleEntryUpdateWithWhereUniqueWithoutSaleInput | MerkleEntryUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: MerkleEntryUpdateManyWithWhereWithoutSaleInput | MerkleEntryUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: MerkleEntryScalarWhereInput | MerkleEntryScalarWhereInput[]
  }

  export type PurchaseUncheckedUpdateManyWithoutSaleNestedInput = {
    create?: XOR<PurchaseCreateWithoutSaleInput, PurchaseUncheckedCreateWithoutSaleInput> | PurchaseCreateWithoutSaleInput[] | PurchaseUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutSaleInput | PurchaseCreateOrConnectWithoutSaleInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutSaleInput | PurchaseUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: PurchaseCreateManySaleInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutSaleInput | PurchaseUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutSaleInput | PurchaseUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type RewardUncheckedUpdateManyWithoutSaleNestedInput = {
    create?: XOR<RewardCreateWithoutSaleInput, RewardUncheckedCreateWithoutSaleInput> | RewardCreateWithoutSaleInput[] | RewardUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutSaleInput | RewardCreateOrConnectWithoutSaleInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutSaleInput | RewardUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: RewardCreateManySaleInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutSaleInput | RewardUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutSaleInput | RewardUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type PaymentRequestUncheckedUpdateManyWithoutSaleNestedInput = {
    create?: XOR<PaymentRequestCreateWithoutSaleInput, PaymentRequestUncheckedCreateWithoutSaleInput> | PaymentRequestCreateWithoutSaleInput[] | PaymentRequestUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PaymentRequestCreateOrConnectWithoutSaleInput | PaymentRequestCreateOrConnectWithoutSaleInput[]
    upsert?: PaymentRequestUpsertWithWhereUniqueWithoutSaleInput | PaymentRequestUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: PaymentRequestCreateManySaleInputEnvelope
    set?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    disconnect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    delete?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    connect?: PaymentRequestWhereUniqueInput | PaymentRequestWhereUniqueInput[]
    update?: PaymentRequestUpdateWithWhereUniqueWithoutSaleInput | PaymentRequestUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: PaymentRequestUpdateManyWithWhereWithoutSaleInput | PaymentRequestUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: PaymentRequestScalarWhereInput | PaymentRequestScalarWhereInput[]
  }

  export type MerkleEntryUncheckedUpdateManyWithoutSaleNestedInput = {
    create?: XOR<MerkleEntryCreateWithoutSaleInput, MerkleEntryUncheckedCreateWithoutSaleInput> | MerkleEntryCreateWithoutSaleInput[] | MerkleEntryUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: MerkleEntryCreateOrConnectWithoutSaleInput | MerkleEntryCreateOrConnectWithoutSaleInput[]
    upsert?: MerkleEntryUpsertWithWhereUniqueWithoutSaleInput | MerkleEntryUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: MerkleEntryCreateManySaleInputEnvelope
    set?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    disconnect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    delete?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    connect?: MerkleEntryWhereUniqueInput | MerkleEntryWhereUniqueInput[]
    update?: MerkleEntryUpdateWithWhereUniqueWithoutSaleInput | MerkleEntryUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: MerkleEntryUpdateManyWithWhereWithoutSaleInput | MerkleEntryUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: MerkleEntryScalarWhereInput | MerkleEntryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPurchasesInput = {
    create?: XOR<UserCreateWithoutPurchasesInput, UserUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchasesInput
    connect?: UserWhereUniqueInput
  }

  export type SaleCreateNestedOneWithoutPurchasesInput = {
    create?: XOR<SaleCreateWithoutPurchasesInput, SaleUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: SaleCreateOrConnectWithoutPurchasesInput
    connect?: SaleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPurchasesNestedInput = {
    create?: XOR<UserCreateWithoutPurchasesInput, UserUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchasesInput
    upsert?: UserUpsertWithoutPurchasesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPurchasesInput, UserUpdateWithoutPurchasesInput>, UserUncheckedUpdateWithoutPurchasesInput>
  }

  export type SaleUpdateOneRequiredWithoutPurchasesNestedInput = {
    create?: XOR<SaleCreateWithoutPurchasesInput, SaleUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: SaleCreateOrConnectWithoutPurchasesInput
    upsert?: SaleUpsertWithoutPurchasesInput
    connect?: SaleWhereUniqueInput
    update?: XOR<XOR<SaleUpdateToOneWithWhereWithoutPurchasesInput, SaleUpdateWithoutPurchasesInput>, SaleUncheckedUpdateWithoutPurchasesInput>
  }

  export type UserCreateNestedOneWithoutRewardsEarnedInput = {
    create?: XOR<UserCreateWithoutRewardsEarnedInput, UserUncheckedCreateWithoutRewardsEarnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsEarnedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRewardsGeneratedInput = {
    create?: XOR<UserCreateWithoutRewardsGeneratedInput, UserUncheckedCreateWithoutRewardsGeneratedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsGeneratedInput
    connect?: UserWhereUniqueInput
  }

  export type SaleCreateNestedOneWithoutRewardsInput = {
    create?: XOR<SaleCreateWithoutRewardsInput, SaleUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: SaleCreateOrConnectWithoutRewardsInput
    connect?: SaleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRewardsEarnedNestedInput = {
    create?: XOR<UserCreateWithoutRewardsEarnedInput, UserUncheckedCreateWithoutRewardsEarnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsEarnedInput
    upsert?: UserUpsertWithoutRewardsEarnedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRewardsEarnedInput, UserUpdateWithoutRewardsEarnedInput>, UserUncheckedUpdateWithoutRewardsEarnedInput>
  }

  export type UserUpdateOneRequiredWithoutRewardsGeneratedNestedInput = {
    create?: XOR<UserCreateWithoutRewardsGeneratedInput, UserUncheckedCreateWithoutRewardsGeneratedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsGeneratedInput
    upsert?: UserUpsertWithoutRewardsGeneratedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRewardsGeneratedInput, UserUpdateWithoutRewardsGeneratedInput>, UserUncheckedUpdateWithoutRewardsGeneratedInput>
  }

  export type SaleUpdateOneRequiredWithoutRewardsNestedInput = {
    create?: XOR<SaleCreateWithoutRewardsInput, SaleUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: SaleCreateOrConnectWithoutRewardsInput
    upsert?: SaleUpsertWithoutRewardsInput
    connect?: SaleWhereUniqueInput
    update?: XOR<XOR<SaleUpdateToOneWithWhereWithoutRewardsInput, SaleUpdateWithoutRewardsInput>, SaleUncheckedUpdateWithoutRewardsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentRequestStatus | EnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentRequestStatus[] | ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentRequestStatus[] | ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentRequestStatusFilter<$PrismaModel> | $Enums.PaymentRequestStatus
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumPaymentRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentRequestStatus | EnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentRequestStatus[] | ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentRequestStatus[] | ListEnumPaymentRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentRequestStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumSaleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SaleStatus | EnumSaleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SaleStatus[] | ListEnumSaleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SaleStatus[] | ListEnumSaleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSaleStatusFilter<$PrismaModel> | $Enums.SaleStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumSaleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SaleStatus | EnumSaleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SaleStatus[] | ListEnumSaleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SaleStatus[] | ListEnumSaleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSaleStatusWithAggregatesFilter<$PrismaModel> | $Enums.SaleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSaleStatusFilter<$PrismaModel>
    _max?: NestedEnumSaleStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type SubscriptionCreateWithoutUserInput = {
    telegramUsername?: string | null
    dateOfBirth?: Date | string | null
    emailAddress?: string | null
    indicative?: string | null
    phoneNumber?: string | null
    cityOfResidency?: string | null
    homeAddress?: string | null
    personalInterests?: string | null
    artisticInterests?: string | null
    investmentInterests?: string | null
    occupation?: string | null
    position?: string | null
    industry?: string | null
    joiningReasons?: string | null
    discoveryMethod?: string | null
    expectations?: string | null
    contribution?: string | null
    engagement?: string | null
    status?: $Enums.SubscriptionStatus
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    telegramUsername?: string | null
    dateOfBirth?: Date | string | null
    emailAddress?: string | null
    indicative?: string | null
    phoneNumber?: string | null
    cityOfResidency?: string | null
    homeAddress?: string | null
    personalInterests?: string | null
    artisticInterests?: string | null
    investmentInterests?: string | null
    occupation?: string | null
    position?: string | null
    industry?: string | null
    joiningReasons?: string | null
    discoveryMethod?: string | null
    expectations?: string | null
    contribution?: string | null
    engagement?: string | null
    status?: $Enums.SubscriptionStatus
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type PurchaseCreateWithoutUserInput = {
    amount: number
    createdAt?: Date | string
    sale: SaleCreateNestedOneWithoutPurchasesInput
  }

  export type PurchaseUncheckedCreateWithoutUserInput = {
    saleName: string
    amount: number
    createdAt?: Date | string
  }

  export type PurchaseCreateOrConnectWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput>
  }

  export type PurchaseCreateManyUserInputEnvelope = {
    data: PurchaseCreateManyUserInput | PurchaseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RewardCreateWithoutUserInput = {
    referralLevel: number
    amount: number
    createdAt?: Date | string
    referee: UserCreateNestedOneWithoutRewardsGeneratedInput
    sale: SaleCreateNestedOneWithoutRewardsInput
  }

  export type RewardUncheckedCreateWithoutUserInput = {
    saleName: string
    refereeId: string
    referralLevel: number
    amount: number
    createdAt?: Date | string
  }

  export type RewardCreateOrConnectWithoutUserInput = {
    where: RewardWhereUniqueInput
    create: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput>
  }

  export type RewardCreateManyUserInputEnvelope = {
    data: RewardCreateManyUserInput | RewardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RewardCreateWithoutRefereeInput = {
    referralLevel: number
    amount: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRewardsEarnedInput
    sale: SaleCreateNestedOneWithoutRewardsInput
  }

  export type RewardUncheckedCreateWithoutRefereeInput = {
    telegramId: string
    saleName: string
    referralLevel: number
    amount: number
    createdAt?: Date | string
  }

  export type RewardCreateOrConnectWithoutRefereeInput = {
    where: RewardWhereUniqueInput
    create: XOR<RewardCreateWithoutRefereeInput, RewardUncheckedCreateWithoutRefereeInput>
  }

  export type RewardCreateManyRefereeInputEnvelope = {
    data: RewardCreateManyRefereeInput | RewardCreateManyRefereeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutReferrerInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardCreateNestedManyWithoutRefereeInput
    referees?: UserCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReferrerInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardUncheckedCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardUncheckedCreateNestedManyWithoutRefereeInput
    referees?: UserUncheckedCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferrerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput>
  }

  export type UserCreateManyReferrerInputEnvelope = {
    data: UserCreateManyReferrerInput | UserCreateManyReferrerInput[]
    skipDuplicates?: boolean
  }

  export type PaymentRequestCreateWithoutUserInput = {
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
    sale: SaleCreateNestedOneWithoutPaymentRequestsInput
  }

  export type PaymentRequestUncheckedCreateWithoutUserInput = {
    saleName: string
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
  }

  export type PaymentRequestCreateOrConnectWithoutUserInput = {
    where: PaymentRequestWhereUniqueInput
    create: XOR<PaymentRequestCreateWithoutUserInput, PaymentRequestUncheckedCreateWithoutUserInput>
  }

  export type PaymentRequestCreateManyUserInputEnvelope = {
    data: PaymentRequestCreateManyUserInput | PaymentRequestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MerkleEntryCreateWithoutUserInput = {
    address?: string | null
    amount: number
    sale: SaleCreateNestedOneWithoutMerkleEntriesInput
  }

  export type MerkleEntryUncheckedCreateWithoutUserInput = {
    saleName: string
    address?: string | null
    amount: number
  }

  export type MerkleEntryCreateOrConnectWithoutUserInput = {
    where: MerkleEntryWhereUniqueInput
    create: XOR<MerkleEntryCreateWithoutUserInput, MerkleEntryUncheckedCreateWithoutUserInput>
  }

  export type MerkleEntryCreateManyUserInputEnvelope = {
    data: MerkleEntryCreateManyUserInput | MerkleEntryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutRefereesInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardCreateNestedManyWithoutRefereeInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutRefereesInput
  }

  export type UserUncheckedCreateWithoutRefereesInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardUncheckedCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardUncheckedCreateNestedManyWithoutRefereeInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefereesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefereesInput, UserUncheckedCreateWithoutRefereesInput>
  }

  export type SubscriptionUpsertWithoutUserInput = {
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutUserInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateWithoutUserInput = {
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    indicative?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    cityOfResidency?: NullableStringFieldUpdateOperationsInput | string | null
    homeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    personalInterests?: NullableStringFieldUpdateOperationsInput | string | null
    artisticInterests?: NullableStringFieldUpdateOperationsInput | string | null
    investmentInterests?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    joiningReasons?: NullableStringFieldUpdateOperationsInput | string | null
    discoveryMethod?: NullableStringFieldUpdateOperationsInput | string | null
    expectations?: NullableStringFieldUpdateOperationsInput | string | null
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    engagement?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    indicative?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    cityOfResidency?: NullableStringFieldUpdateOperationsInput | string | null
    homeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    personalInterests?: NullableStringFieldUpdateOperationsInput | string | null
    artisticInterests?: NullableStringFieldUpdateOperationsInput | string | null
    investmentInterests?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    joiningReasons?: NullableStringFieldUpdateOperationsInput | string | null
    discoveryMethod?: NullableStringFieldUpdateOperationsInput | string | null
    expectations?: NullableStringFieldUpdateOperationsInput | string | null
    contribution?: NullableStringFieldUpdateOperationsInput | string | null
    engagement?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
  }

  export type PurchaseUpsertWithWhereUniqueWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutUserInput, PurchaseUncheckedUpdateWithoutUserInput>
    create: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutUserInput, PurchaseUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutUserInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutUserInput>
  }

  export type PurchaseScalarWhereInput = {
    AND?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
    OR?: PurchaseScalarWhereInput[]
    NOT?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
    telegramId?: StringFilter<"Purchase"> | string
    saleName?: StringFilter<"Purchase"> | string
    amount?: IntFilter<"Purchase"> | number
    createdAt?: DateTimeFilter<"Purchase"> | Date | string
  }

  export type RewardUpsertWithWhereUniqueWithoutUserInput = {
    where: RewardWhereUniqueInput
    update: XOR<RewardUpdateWithoutUserInput, RewardUncheckedUpdateWithoutUserInput>
    create: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput>
  }

  export type RewardUpdateWithWhereUniqueWithoutUserInput = {
    where: RewardWhereUniqueInput
    data: XOR<RewardUpdateWithoutUserInput, RewardUncheckedUpdateWithoutUserInput>
  }

  export type RewardUpdateManyWithWhereWithoutUserInput = {
    where: RewardScalarWhereInput
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyWithoutUserInput>
  }

  export type RewardScalarWhereInput = {
    AND?: RewardScalarWhereInput | RewardScalarWhereInput[]
    OR?: RewardScalarWhereInput[]
    NOT?: RewardScalarWhereInput | RewardScalarWhereInput[]
    telegramId?: StringFilter<"Reward"> | string
    saleName?: StringFilter<"Reward"> | string
    refereeId?: StringFilter<"Reward"> | string
    referralLevel?: IntFilter<"Reward"> | number
    amount?: IntFilter<"Reward"> | number
    createdAt?: DateTimeFilter<"Reward"> | Date | string
  }

  export type RewardUpsertWithWhereUniqueWithoutRefereeInput = {
    where: RewardWhereUniqueInput
    update: XOR<RewardUpdateWithoutRefereeInput, RewardUncheckedUpdateWithoutRefereeInput>
    create: XOR<RewardCreateWithoutRefereeInput, RewardUncheckedCreateWithoutRefereeInput>
  }

  export type RewardUpdateWithWhereUniqueWithoutRefereeInput = {
    where: RewardWhereUniqueInput
    data: XOR<RewardUpdateWithoutRefereeInput, RewardUncheckedUpdateWithoutRefereeInput>
  }

  export type RewardUpdateManyWithWhereWithoutRefereeInput = {
    where: RewardScalarWhereInput
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyWithoutRefereeInput>
  }

  export type UserUpsertWithWhereUniqueWithoutReferrerInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReferrerInput, UserUncheckedUpdateWithoutReferrerInput>
    create: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReferrerInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReferrerInput, UserUncheckedUpdateWithoutReferrerInput>
  }

  export type UserUpdateManyWithWhereWithoutReferrerInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReferrerInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    telegramId?: StringFilter<"User"> | string
    referrerId?: StringNullableFilter<"User"> | string | null
    referralRewardLevelRates?: FloatNullableListFilter<"User">
    nonce?: IntFilter<"User"> | number
    walletAddress?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
  }

  export type PaymentRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentRequestWhereUniqueInput
    update: XOR<PaymentRequestUpdateWithoutUserInput, PaymentRequestUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentRequestCreateWithoutUserInput, PaymentRequestUncheckedCreateWithoutUserInput>
  }

  export type PaymentRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentRequestWhereUniqueInput
    data: XOR<PaymentRequestUpdateWithoutUserInput, PaymentRequestUncheckedUpdateWithoutUserInput>
  }

  export type PaymentRequestUpdateManyWithWhereWithoutUserInput = {
    where: PaymentRequestScalarWhereInput
    data: XOR<PaymentRequestUpdateManyMutationInput, PaymentRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentRequestScalarWhereInput = {
    AND?: PaymentRequestScalarWhereInput | PaymentRequestScalarWhereInput[]
    OR?: PaymentRequestScalarWhereInput[]
    NOT?: PaymentRequestScalarWhereInput | PaymentRequestScalarWhereInput[]
    telegramId?: StringFilter<"PaymentRequest"> | string
    saleName?: StringFilter<"PaymentRequest"> | string
    seqNo?: IntFilter<"PaymentRequest"> | number
    code?: StringFilter<"PaymentRequest"> | string
    status?: EnumPaymentRequestStatusFilter<"PaymentRequest"> | $Enums.PaymentRequestStatus
    amount?: IntFilter<"PaymentRequest"> | number
    price?: FloatFilter<"PaymentRequest"> | number
    destination?: StringFilter<"PaymentRequest"> | string
    method?: EnumPaymentMethodFilter<"PaymentRequest"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"PaymentRequest"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentRequest"> | Date | string
    expireAt?: DateTimeFilter<"PaymentRequest"> | Date | string
  }

  export type MerkleEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: MerkleEntryWhereUniqueInput
    update: XOR<MerkleEntryUpdateWithoutUserInput, MerkleEntryUncheckedUpdateWithoutUserInput>
    create: XOR<MerkleEntryCreateWithoutUserInput, MerkleEntryUncheckedCreateWithoutUserInput>
  }

  export type MerkleEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: MerkleEntryWhereUniqueInput
    data: XOR<MerkleEntryUpdateWithoutUserInput, MerkleEntryUncheckedUpdateWithoutUserInput>
  }

  export type MerkleEntryUpdateManyWithWhereWithoutUserInput = {
    where: MerkleEntryScalarWhereInput
    data: XOR<MerkleEntryUpdateManyMutationInput, MerkleEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type MerkleEntryScalarWhereInput = {
    AND?: MerkleEntryScalarWhereInput | MerkleEntryScalarWhereInput[]
    OR?: MerkleEntryScalarWhereInput[]
    NOT?: MerkleEntryScalarWhereInput | MerkleEntryScalarWhereInput[]
    telegramId?: StringFilter<"MerkleEntry"> | string
    saleName?: StringFilter<"MerkleEntry"> | string
    address?: StringNullableFilter<"MerkleEntry"> | string | null
    amount?: IntFilter<"MerkleEntry"> | number
  }

  export type UserUpsertWithoutRefereesInput = {
    update: XOR<UserUpdateWithoutRefereesInput, UserUncheckedUpdateWithoutRefereesInput>
    create: XOR<UserCreateWithoutRefereesInput, UserUncheckedCreateWithoutRefereesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefereesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefereesInput, UserUncheckedUpdateWithoutRefereesInput>
  }

  export type UserUpdateWithoutRefereesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUpdateManyWithoutRefereeNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutRefereesNestedInput
  }

  export type UserUncheckedUpdateWithoutRefereesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUncheckedUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUncheckedUpdateManyWithoutRefereeNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSubscriptionInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardCreateNestedManyWithoutRefereeInput
    referees?: UserCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutRefereesInput
  }

  export type UserUncheckedCreateWithoutSubscriptionInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardUncheckedCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardUncheckedCreateNestedManyWithoutRefereeInput
    referees?: UserUncheckedCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
  }

  export type UserUpsertWithoutSubscriptionInput = {
    update: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserUpdateWithoutSubscriptionInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUpdateManyWithoutRefereeNestedInput
    referees?: UserUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutRefereesNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUncheckedUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUncheckedUpdateManyWithoutRefereeNestedInput
    referees?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPaymentRequestsInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardCreateNestedManyWithoutRefereeInput
    referees?: UserCreateNestedManyWithoutReferrerInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutRefereesInput
  }

  export type UserUncheckedCreateWithoutPaymentRequestsInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardUncheckedCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardUncheckedCreateNestedManyWithoutRefereeInput
    referees?: UserUncheckedCreateNestedManyWithoutReferrerInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPaymentRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentRequestsInput, UserUncheckedCreateWithoutPaymentRequestsInput>
  }

  export type SaleCreateWithoutPaymentRequestsInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    purchases?: PurchaseCreateNestedManyWithoutSaleInput
    rewards?: RewardCreateNestedManyWithoutSaleInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutPaymentRequestsInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    purchases?: PurchaseUncheckedCreateNestedManyWithoutSaleInput
    rewards?: RewardUncheckedCreateNestedManyWithoutSaleInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutPaymentRequestsInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutPaymentRequestsInput, SaleUncheckedCreateWithoutPaymentRequestsInput>
  }

  export type UserUpsertWithoutPaymentRequestsInput = {
    update: XOR<UserUpdateWithoutPaymentRequestsInput, UserUncheckedUpdateWithoutPaymentRequestsInput>
    create: XOR<UserCreateWithoutPaymentRequestsInput, UserUncheckedCreateWithoutPaymentRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentRequestsInput, UserUncheckedUpdateWithoutPaymentRequestsInput>
  }

  export type UserUpdateWithoutPaymentRequestsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUpdateManyWithoutRefereeNestedInput
    referees?: UserUpdateManyWithoutReferrerNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutRefereesNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentRequestsInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUncheckedUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUncheckedUpdateManyWithoutRefereeNestedInput
    referees?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SaleUpsertWithoutPaymentRequestsInput = {
    update: XOR<SaleUpdateWithoutPaymentRequestsInput, SaleUncheckedUpdateWithoutPaymentRequestsInput>
    create: XOR<SaleCreateWithoutPaymentRequestsInput, SaleUncheckedCreateWithoutPaymentRequestsInput>
    where?: SaleWhereInput
  }

  export type SaleUpdateToOneWithWhereWithoutPaymentRequestsInput = {
    where?: SaleWhereInput
    data: XOR<SaleUpdateWithoutPaymentRequestsInput, SaleUncheckedUpdateWithoutPaymentRequestsInput>
  }

  export type SaleUpdateWithoutPaymentRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchases?: PurchaseUpdateManyWithoutSaleNestedInput
    rewards?: RewardUpdateManyWithoutSaleNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutPaymentRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchases?: PurchaseUncheckedUpdateManyWithoutSaleNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutSaleNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type UserCreateWithoutMerkleEntriesInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardCreateNestedManyWithoutRefereeInput
    referees?: UserCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutRefereesInput
  }

  export type UserUncheckedCreateWithoutMerkleEntriesInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardUncheckedCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardUncheckedCreateNestedManyWithoutRefereeInput
    referees?: UserUncheckedCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMerkleEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMerkleEntriesInput, UserUncheckedCreateWithoutMerkleEntriesInput>
  }

  export type SaleCreateWithoutMerkleEntriesInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    purchases?: PurchaseCreateNestedManyWithoutSaleInput
    rewards?: RewardCreateNestedManyWithoutSaleInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutMerkleEntriesInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    purchases?: PurchaseUncheckedCreateNestedManyWithoutSaleInput
    rewards?: RewardUncheckedCreateNestedManyWithoutSaleInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutMerkleEntriesInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutMerkleEntriesInput, SaleUncheckedCreateWithoutMerkleEntriesInput>
  }

  export type UserUpsertWithoutMerkleEntriesInput = {
    update: XOR<UserUpdateWithoutMerkleEntriesInput, UserUncheckedUpdateWithoutMerkleEntriesInput>
    create: XOR<UserCreateWithoutMerkleEntriesInput, UserUncheckedCreateWithoutMerkleEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMerkleEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMerkleEntriesInput, UserUncheckedUpdateWithoutMerkleEntriesInput>
  }

  export type UserUpdateWithoutMerkleEntriesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUpdateManyWithoutRefereeNestedInput
    referees?: UserUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutRefereesNestedInput
  }

  export type UserUncheckedUpdateWithoutMerkleEntriesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUncheckedUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUncheckedUpdateManyWithoutRefereeNestedInput
    referees?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SaleUpsertWithoutMerkleEntriesInput = {
    update: XOR<SaleUpdateWithoutMerkleEntriesInput, SaleUncheckedUpdateWithoutMerkleEntriesInput>
    create: XOR<SaleCreateWithoutMerkleEntriesInput, SaleUncheckedCreateWithoutMerkleEntriesInput>
    where?: SaleWhereInput
  }

  export type SaleUpdateToOneWithWhereWithoutMerkleEntriesInput = {
    where?: SaleWhereInput
    data: XOR<SaleUpdateWithoutMerkleEntriesInput, SaleUncheckedUpdateWithoutMerkleEntriesInput>
  }

  export type SaleUpdateWithoutMerkleEntriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchases?: PurchaseUpdateManyWithoutSaleNestedInput
    rewards?: RewardUpdateManyWithoutSaleNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutMerkleEntriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchases?: PurchaseUncheckedUpdateManyWithoutSaleNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutSaleNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type PurchaseCreateWithoutSaleInput = {
    amount: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPurchasesInput
  }

  export type PurchaseUncheckedCreateWithoutSaleInput = {
    telegramId: string
    amount: number
    createdAt?: Date | string
  }

  export type PurchaseCreateOrConnectWithoutSaleInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutSaleInput, PurchaseUncheckedCreateWithoutSaleInput>
  }

  export type PurchaseCreateManySaleInputEnvelope = {
    data: PurchaseCreateManySaleInput | PurchaseCreateManySaleInput[]
    skipDuplicates?: boolean
  }

  export type RewardCreateWithoutSaleInput = {
    referralLevel: number
    amount: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRewardsEarnedInput
    referee: UserCreateNestedOneWithoutRewardsGeneratedInput
  }

  export type RewardUncheckedCreateWithoutSaleInput = {
    telegramId: string
    refereeId: string
    referralLevel: number
    amount: number
    createdAt?: Date | string
  }

  export type RewardCreateOrConnectWithoutSaleInput = {
    where: RewardWhereUniqueInput
    create: XOR<RewardCreateWithoutSaleInput, RewardUncheckedCreateWithoutSaleInput>
  }

  export type RewardCreateManySaleInputEnvelope = {
    data: RewardCreateManySaleInput | RewardCreateManySaleInput[]
    skipDuplicates?: boolean
  }

  export type PaymentRequestCreateWithoutSaleInput = {
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
    user: UserCreateNestedOneWithoutPaymentRequestsInput
  }

  export type PaymentRequestUncheckedCreateWithoutSaleInput = {
    telegramId: string
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
  }

  export type PaymentRequestCreateOrConnectWithoutSaleInput = {
    where: PaymentRequestWhereUniqueInput
    create: XOR<PaymentRequestCreateWithoutSaleInput, PaymentRequestUncheckedCreateWithoutSaleInput>
  }

  export type PaymentRequestCreateManySaleInputEnvelope = {
    data: PaymentRequestCreateManySaleInput | PaymentRequestCreateManySaleInput[]
    skipDuplicates?: boolean
  }

  export type MerkleEntryCreateWithoutSaleInput = {
    address?: string | null
    amount: number
    user: UserCreateNestedOneWithoutMerkleEntriesInput
  }

  export type MerkleEntryUncheckedCreateWithoutSaleInput = {
    telegramId: string
    address?: string | null
    amount: number
  }

  export type MerkleEntryCreateOrConnectWithoutSaleInput = {
    where: MerkleEntryWhereUniqueInput
    create: XOR<MerkleEntryCreateWithoutSaleInput, MerkleEntryUncheckedCreateWithoutSaleInput>
  }

  export type MerkleEntryCreateManySaleInputEnvelope = {
    data: MerkleEntryCreateManySaleInput | MerkleEntryCreateManySaleInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseUpsertWithWhereUniqueWithoutSaleInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutSaleInput, PurchaseUncheckedUpdateWithoutSaleInput>
    create: XOR<PurchaseCreateWithoutSaleInput, PurchaseUncheckedCreateWithoutSaleInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutSaleInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutSaleInput, PurchaseUncheckedUpdateWithoutSaleInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutSaleInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutSaleInput>
  }

  export type RewardUpsertWithWhereUniqueWithoutSaleInput = {
    where: RewardWhereUniqueInput
    update: XOR<RewardUpdateWithoutSaleInput, RewardUncheckedUpdateWithoutSaleInput>
    create: XOR<RewardCreateWithoutSaleInput, RewardUncheckedCreateWithoutSaleInput>
  }

  export type RewardUpdateWithWhereUniqueWithoutSaleInput = {
    where: RewardWhereUniqueInput
    data: XOR<RewardUpdateWithoutSaleInput, RewardUncheckedUpdateWithoutSaleInput>
  }

  export type RewardUpdateManyWithWhereWithoutSaleInput = {
    where: RewardScalarWhereInput
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyWithoutSaleInput>
  }

  export type PaymentRequestUpsertWithWhereUniqueWithoutSaleInput = {
    where: PaymentRequestWhereUniqueInput
    update: XOR<PaymentRequestUpdateWithoutSaleInput, PaymentRequestUncheckedUpdateWithoutSaleInput>
    create: XOR<PaymentRequestCreateWithoutSaleInput, PaymentRequestUncheckedCreateWithoutSaleInput>
  }

  export type PaymentRequestUpdateWithWhereUniqueWithoutSaleInput = {
    where: PaymentRequestWhereUniqueInput
    data: XOR<PaymentRequestUpdateWithoutSaleInput, PaymentRequestUncheckedUpdateWithoutSaleInput>
  }

  export type PaymentRequestUpdateManyWithWhereWithoutSaleInput = {
    where: PaymentRequestScalarWhereInput
    data: XOR<PaymentRequestUpdateManyMutationInput, PaymentRequestUncheckedUpdateManyWithoutSaleInput>
  }

  export type MerkleEntryUpsertWithWhereUniqueWithoutSaleInput = {
    where: MerkleEntryWhereUniqueInput
    update: XOR<MerkleEntryUpdateWithoutSaleInput, MerkleEntryUncheckedUpdateWithoutSaleInput>
    create: XOR<MerkleEntryCreateWithoutSaleInput, MerkleEntryUncheckedCreateWithoutSaleInput>
  }

  export type MerkleEntryUpdateWithWhereUniqueWithoutSaleInput = {
    where: MerkleEntryWhereUniqueInput
    data: XOR<MerkleEntryUpdateWithoutSaleInput, MerkleEntryUncheckedUpdateWithoutSaleInput>
  }

  export type MerkleEntryUpdateManyWithWhereWithoutSaleInput = {
    where: MerkleEntryScalarWhereInput
    data: XOR<MerkleEntryUpdateManyMutationInput, MerkleEntryUncheckedUpdateManyWithoutSaleInput>
  }

  export type UserCreateWithoutPurchasesInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    rewardsEarned?: RewardCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardCreateNestedManyWithoutRefereeInput
    referees?: UserCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutRefereesInput
  }

  export type UserUncheckedCreateWithoutPurchasesInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    rewardsEarned?: RewardUncheckedCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardUncheckedCreateNestedManyWithoutRefereeInput
    referees?: UserUncheckedCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPurchasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPurchasesInput, UserUncheckedCreateWithoutPurchasesInput>
  }

  export type SaleCreateWithoutPurchasesInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    rewards?: RewardCreateNestedManyWithoutSaleInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutSaleInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutPurchasesInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    rewards?: RewardUncheckedCreateNestedManyWithoutSaleInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutSaleInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutPurchasesInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutPurchasesInput, SaleUncheckedCreateWithoutPurchasesInput>
  }

  export type UserUpsertWithoutPurchasesInput = {
    update: XOR<UserUpdateWithoutPurchasesInput, UserUncheckedUpdateWithoutPurchasesInput>
    create: XOR<UserCreateWithoutPurchasesInput, UserUncheckedCreateWithoutPurchasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPurchasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPurchasesInput, UserUncheckedUpdateWithoutPurchasesInput>
  }

  export type UserUpdateWithoutPurchasesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    rewardsEarned?: RewardUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUpdateManyWithoutRefereeNestedInput
    referees?: UserUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutRefereesNestedInput
  }

  export type UserUncheckedUpdateWithoutPurchasesInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    rewardsEarned?: RewardUncheckedUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUncheckedUpdateManyWithoutRefereeNestedInput
    referees?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SaleUpsertWithoutPurchasesInput = {
    update: XOR<SaleUpdateWithoutPurchasesInput, SaleUncheckedUpdateWithoutPurchasesInput>
    create: XOR<SaleCreateWithoutPurchasesInput, SaleUncheckedCreateWithoutPurchasesInput>
    where?: SaleWhereInput
  }

  export type SaleUpdateToOneWithWhereWithoutPurchasesInput = {
    where?: SaleWhereInput
    data: XOR<SaleUpdateWithoutPurchasesInput, SaleUncheckedUpdateWithoutPurchasesInput>
  }

  export type SaleUpdateWithoutPurchasesInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewards?: RewardUpdateManyWithoutSaleNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutSaleNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutPurchasesInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewards?: RewardUncheckedUpdateManyWithoutSaleNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutSaleNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type UserCreateWithoutRewardsEarnedInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardCreateNestedManyWithoutRefereeInput
    referees?: UserCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutRefereesInput
  }

  export type UserUncheckedCreateWithoutRewardsEarnedInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    rewardsGenerated?: RewardUncheckedCreateNestedManyWithoutRefereeInput
    referees?: UserUncheckedCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRewardsEarnedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRewardsEarnedInput, UserUncheckedCreateWithoutRewardsEarnedInput>
  }

  export type UserCreateWithoutRewardsGeneratedInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    purchases?: PurchaseCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardCreateNestedManyWithoutUserInput
    referees?: UserCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutRefereesInput
  }

  export type UserUncheckedCreateWithoutRewardsGeneratedInput = {
    telegramId: string
    referrerId?: string | null
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    rewardsEarned?: RewardUncheckedCreateNestedManyWithoutUserInput
    referees?: UserUncheckedCreateNestedManyWithoutReferrerInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutUserInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRewardsGeneratedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRewardsGeneratedInput, UserUncheckedCreateWithoutRewardsGeneratedInput>
  }

  export type SaleCreateWithoutRewardsInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    purchases?: PurchaseCreateNestedManyWithoutSaleInput
    paymentRequests?: PaymentRequestCreateNestedManyWithoutSaleInput
    merkleEntries?: MerkleEntryCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutRewardsInput = {
    name: string
    status: $Enums.SaleStatus
    isReceivingAddressEditable?: boolean
    phases: number
    tokensPerPhase?: SaleCreatetokensPerPhaseInput | number[]
    initialPrice: Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleCreatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: Date | string | null
    end?: Date | string | null
    pausedTime?: number
    pendingOrderAmount?: number
    totalSold?: number
    totalRewards?: number
    createdAt?: Date | string
    pausedAt?: Date | string | null
    purchases?: PurchaseUncheckedCreateNestedManyWithoutSaleInput
    paymentRequests?: PaymentRequestUncheckedCreateNestedManyWithoutSaleInput
    merkleEntries?: MerkleEntryUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutRewardsInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutRewardsInput, SaleUncheckedCreateWithoutRewardsInput>
  }

  export type UserUpsertWithoutRewardsEarnedInput = {
    update: XOR<UserUpdateWithoutRewardsEarnedInput, UserUncheckedUpdateWithoutRewardsEarnedInput>
    create: XOR<UserCreateWithoutRewardsEarnedInput, UserUncheckedCreateWithoutRewardsEarnedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRewardsEarnedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRewardsEarnedInput, UserUncheckedUpdateWithoutRewardsEarnedInput>
  }

  export type UserUpdateWithoutRewardsEarnedInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUpdateManyWithoutRefereeNestedInput
    referees?: UserUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutRefereesNestedInput
  }

  export type UserUncheckedUpdateWithoutRewardsEarnedInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUncheckedUpdateManyWithoutRefereeNestedInput
    referees?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutRewardsGeneratedInput = {
    update: XOR<UserUpdateWithoutRewardsGeneratedInput, UserUncheckedUpdateWithoutRewardsGeneratedInput>
    create: XOR<UserCreateWithoutRewardsGeneratedInput, UserUncheckedCreateWithoutRewardsGeneratedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRewardsGeneratedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRewardsGeneratedInput, UserUncheckedUpdateWithoutRewardsGeneratedInput>
  }

  export type UserUpdateWithoutRewardsGeneratedInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUpdateManyWithoutUserNestedInput
    referees?: UserUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutRefereesNestedInput
  }

  export type UserUncheckedUpdateWithoutRewardsGeneratedInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUncheckedUpdateManyWithoutUserNestedInput
    referees?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SaleUpsertWithoutRewardsInput = {
    update: XOR<SaleUpdateWithoutRewardsInput, SaleUncheckedUpdateWithoutRewardsInput>
    create: XOR<SaleCreateWithoutRewardsInput, SaleUncheckedCreateWithoutRewardsInput>
    where?: SaleWhereInput
  }

  export type SaleUpdateToOneWithWhereWithoutRewardsInput = {
    where?: SaleWhereInput
    data: XOR<SaleUpdateWithoutRewardsInput, SaleUncheckedUpdateWithoutRewardsInput>
  }

  export type SaleUpdateWithoutRewardsInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchases?: PurchaseUpdateManyWithoutSaleNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutSaleNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutRewardsInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
    isReceivingAddressEditable?: BoolFieldUpdateOperationsInput | boolean
    phases?: IntFieldUpdateOperationsInput | number
    tokensPerPhase?: SaleUpdatetokensPerPhaseInput | number[]
    initialPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceIncrement?: SaleUpdatepriceIncrementInput | Decimal[] | DecimalJsLike[] | number[] | string[]
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedTime?: IntFieldUpdateOperationsInput | number
    pendingOrderAmount?: IntFieldUpdateOperationsInput | number
    totalSold?: IntFieldUpdateOperationsInput | number
    totalRewards?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchases?: PurchaseUncheckedUpdateManyWithoutSaleNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutSaleNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type PurchaseCreateManyUserInput = {
    saleName: string
    amount: number
    createdAt?: Date | string
  }

  export type RewardCreateManyUserInput = {
    saleName: string
    refereeId: string
    referralLevel: number
    amount: number
    createdAt?: Date | string
  }

  export type RewardCreateManyRefereeInput = {
    telegramId: string
    saleName: string
    referralLevel: number
    amount: number
    createdAt?: Date | string
  }

  export type UserCreateManyReferrerInput = {
    telegramId: string
    referralRewardLevelRates?: UserCreatereferralRewardLevelRatesInput | number[]
    nonce?: number
    walletAddress?: string | null
    username?: string | null
    password?: string | null
    role?: $Enums.UserRole
  }

  export type PaymentRequestCreateManyUserInput = {
    saleName: string
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
  }

  export type MerkleEntryCreateManyUserInput = {
    saleName: string
    address?: string | null
    amount: number
  }

  export type PurchaseUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sale?: SaleUpdateOneRequiredWithoutPurchasesNestedInput
  }

  export type PurchaseUncheckedUpdateWithoutUserInput = {
    saleName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseUncheckedUpdateManyWithoutUserInput = {
    saleName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUpdateWithoutUserInput = {
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referee?: UserUpdateOneRequiredWithoutRewardsGeneratedNestedInput
    sale?: SaleUpdateOneRequiredWithoutRewardsNestedInput
  }

  export type RewardUncheckedUpdateWithoutUserInput = {
    saleName?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyWithoutUserInput = {
    saleName?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUpdateWithoutRefereeInput = {
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRewardsEarnedNestedInput
    sale?: SaleUpdateOneRequiredWithoutRewardsNestedInput
  }

  export type RewardUncheckedUpdateWithoutRefereeInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyWithoutRefereeInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    saleName?: StringFieldUpdateOperationsInput | string
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutReferrerInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUpdateManyWithoutRefereeNestedInput
    referees?: UserUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReferrerInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    purchases?: PurchaseUncheckedUpdateManyWithoutUserNestedInput
    rewardsEarned?: RewardUncheckedUpdateManyWithoutUserNestedInput
    rewardsGenerated?: RewardUncheckedUpdateManyWithoutRefereeNestedInput
    referees?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    paymentRequests?: PaymentRequestUncheckedUpdateManyWithoutUserNestedInput
    merkleEntries?: MerkleEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReferrerInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    referralRewardLevelRates?: UserUpdatereferralRewardLevelRatesInput | number[]
    nonce?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type PaymentRequestUpdateWithoutUserInput = {
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sale?: SaleUpdateOneRequiredWithoutPaymentRequestsNestedInput
  }

  export type PaymentRequestUncheckedUpdateWithoutUserInput = {
    saleName?: StringFieldUpdateOperationsInput | string
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentRequestUncheckedUpdateManyWithoutUserInput = {
    saleName?: StringFieldUpdateOperationsInput | string
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleEntryUpdateWithoutUserInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    sale?: SaleUpdateOneRequiredWithoutMerkleEntriesNestedInput
  }

  export type MerkleEntryUncheckedUpdateWithoutUserInput = {
    saleName?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type MerkleEntryUncheckedUpdateManyWithoutUserInput = {
    saleName?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseCreateManySaleInput = {
    telegramId: string
    amount: number
    createdAt?: Date | string
  }

  export type RewardCreateManySaleInput = {
    telegramId: string
    refereeId: string
    referralLevel: number
    amount: number
    createdAt?: Date | string
  }

  export type PaymentRequestCreateManySaleInput = {
    telegramId: string
    seqNo: number
    code: string
    status?: $Enums.PaymentRequestStatus
    amount: number
    price: number
    destination: string
    method: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    expireAt: Date | string
  }

  export type MerkleEntryCreateManySaleInput = {
    telegramId: string
    address?: string | null
    amount: number
  }

  export type PurchaseUpdateWithoutSaleInput = {
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPurchasesNestedInput
  }

  export type PurchaseUncheckedUpdateWithoutSaleInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseUncheckedUpdateManyWithoutSaleInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUpdateWithoutSaleInput = {
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRewardsEarnedNestedInput
    referee?: UserUpdateOneRequiredWithoutRewardsGeneratedNestedInput
  }

  export type RewardUncheckedUpdateWithoutSaleInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyWithoutSaleInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralLevel?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentRequestUpdateWithoutSaleInput = {
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPaymentRequestsNestedInput
  }

  export type PaymentRequestUncheckedUpdateWithoutSaleInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentRequestUncheckedUpdateManyWithoutSaleInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    seqNo?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentRequestStatusFieldUpdateOperationsInput | $Enums.PaymentRequestStatus
    amount?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleEntryUpdateWithoutSaleInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutMerkleEntriesNestedInput
  }

  export type MerkleEntryUncheckedUpdateWithoutSaleInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type MerkleEntryUncheckedUpdateManyWithoutSaleInput = {
    telegramId?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaleCountOutputTypeDefaultArgs instead
     */
    export type SaleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionDefaultArgs instead
     */
    export type SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentRequestDefaultArgs instead
     */
    export type PaymentRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MerkleEntryDefaultArgs instead
     */
    export type MerkleEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MerkleEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaleDefaultArgs instead
     */
    export type SaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PurchaseDefaultArgs instead
     */
    export type PurchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PurchaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RewardDefaultArgs instead
     */
    export type RewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RewardDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}