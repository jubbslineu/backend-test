
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.10.2
 * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
 */
Prisma.prismaVersion = {
  client: "5.10.2",
  engine: "5a9203d0590c951969e85a7d07215503f4672eb9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  telegramId: 'telegramId',
  referrerId: 'referrerId',
  referralRewardLevelRates: 'referralRewardLevelRates',
  username: 'username',
  password: 'password',
  role: 'role'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  telegramId: 'telegramId',
  telegramUsername: 'telegramUsername',
  dateOfBirth: 'dateOfBirth',
  emailAddress: 'emailAddress',
  indicative: 'indicative',
  phoneNumber: 'phoneNumber',
  cityOfResidency: 'cityOfResidency',
  homeAddress: 'homeAddress',
  personalInterests: 'personalInterests',
  artisticInterests: 'artisticInterests',
  investmentInterests: 'investmentInterests',
  occupation: 'occupation',
  position: 'position',
  industry: 'industry',
  joiningReasons: 'joiningReasons',
  discoveryMethod: 'discoveryMethod',
  expectations: 'expectations',
  contribution: 'contribution',
  engagement: 'engagement',
  status: 'status'
};

exports.Prisma.PaymentRequestScalarFieldEnum = {
  telegramId: 'telegramId',
  saleName: 'saleName',
  seqNo: 'seqNo',
  code: 'code',
  status: 'status',
  amount: 'amount',
  price: 'price',
  destination: 'destination',
  method: 'method',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expireAt: 'expireAt'
};

exports.Prisma.SaleScalarFieldEnum = {
  name: 'name',
  status: 'status',
  phases: 'phases',
  tokensPerPhase: 'tokensPerPhase',
  initialPrice: 'initialPrice',
  priceIncrement: 'priceIncrement',
  start: 'start',
  end: 'end',
  pausedTime: 'pausedTime',
  pendingOrderAmount: 'pendingOrderAmount',
  totalSold: 'totalSold',
  totalRewards: 'totalRewards',
  createdAt: 'createdAt',
  pausedAt: 'pausedAt'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  telegramId: 'telegramId',
  saleName: 'saleName',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.RewardScalarFieldEnum = {
  telegramId: 'telegramId',
  saleName: 'saleName',
  refereeId: 'refereeId',
  referralLevel: 'referralLevel',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  REGULAR: 'REGULAR',
  ADMIN: 'ADMIN'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  APPROVED: 'APPROVED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED'
};

exports.PaymentRequestStatus = exports.$Enums.PaymentRequestStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CHANGELLY_CRYPTO: 'CHANGELLY_CRYPTO',
  CHANGELLY_FIAT: 'CHANGELLY_FIAT',
  TON: 'TON'
};

exports.SaleStatus = exports.$Enums.SaleStatus = {
  ON_SALE: 'ON_SALE',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED',
  SOLD_OUT: 'SOLD_OUT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Subscription: 'Subscription',
  PaymentRequest: 'PaymentRequest',
  Sale: 'Sale',
  Purchase: 'Purchase',
  Reward: 'Reward'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions or Edge Middleware',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
